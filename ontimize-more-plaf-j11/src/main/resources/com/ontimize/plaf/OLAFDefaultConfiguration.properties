
##########################################  GENERIC COLORS  ########################################################
# These properties allow users to change the colors of the whole Look And Feel, that is, for all the components. However, more specific properties (which override
# these global properties) can be set by filling the components properties (that is, the properties indicated below for each component: TEXTFIELD, TREE, ...)
# For instance: the variable text allows users to set the color of the whole application texts. However, another different text color can be indicated for the tree
# using the property Tree.textForeground.

# All these values are Colours, so, these values can be set as RGB or Hexadecimal values. Moreover an alpha value 
# can be added as forth value in the RGB (that is R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). A single value indicates a single border.
#(Two-colors-Ex: 255;255;255~0;0;0 or with alpha 255;255;255;50~0;0;0;100 or #ffffff~#000000 or #ffffffcc-#000000cc )

text=
nimbusSelectionBackground=
nimbusSelectedText=
nimbusDisabledText=
nimbusLightBackground=
control=
info=
nimbusInfoBlue=
nimbusAlertYellow=
nimbusBase=
nimbusFocus=
nimbusGreen=
nimbusRed=
nimbusOrange=

activeCaption=
background=
controlDkShadow=
controlHighlight=
controlLHighlight=
controlShadow=
controlText=
desktop =
inactiveCaption=
infoText=
menu=
menuText=
nimbusBlueGrey=
nimbusBorder=
nimbusSelection=
scrollbar=
textBackground=
textForeground=
textHighlight=
textHighlightText=
textInactiveText=





############################################# TEXTFIELD ############################################################
# TEXTFIELD (It is included in most of the Ontimize Data Fields among other components such as, the form title, 
# the page number (in a pageable table), the quickfilter, ...):

##     font indicates     the font for that component. A three-elements short list value with fontName-fontStyle-fontSize is required (Ex: Calibri-PLAIN-12). 
TextField.font=

##     contentMargins     indicates the component margins. Four int values splitted by commas are required. The order is top;left;bottom;right 
TextField.contentMargins=

##     textForeground     indicates the font Color for that component.  A RGB or Hexadecimal value is required (allowing alpha indication as forth value in the RGB
# (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). 
TextField[Enabled].textForeground=#335971
TextField[Disabled].textForeground=
TextField[Focused].textForeground=#FFFFFF
TextField[Selected].textForeground=#FFFFFF

##     arcWidth and arcHeight     positive values indicates the component corner arc to round the component. Negative values indicates default Nimbus shape(rectangular).  An int value is required. 
TextField.arcWidth=10
TextField.arcHeight=10

##     background     indicates the background for that component. A painter is required (gradient, texture or color with or without alpha. See documentation)
TextField[Enabled].backgroundPainter_bgPainter=#FFFFFF
TextField[Disabled].backgroundPainter_bgPainter=255;255;255;125
TextField[Selected].backgroundPainter_bgPainter=#61BEE8

##     degradatedBorderColor     indicates the border color pixel by pixel for that component (Color order is outside-in). ¡USED ONLY WHEN arcWidth>=0 AND arcHeight>=0 !
# Can be set as RGB or Hexadecimal values as degrated colours desired (splitted by ~). Moreover an alpha value can be added as forth value in the RGB
#(that is R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). A single value indicates a single border.
#(Two-colors-Ex: 255;255;255~0;0;0 or with alpha 255;255;255;50~0;0;0;100 or #ffffff~#000000 or #ffffffcc-#000000cc )
TextField.degradatedBorderColor.Enabled=#E5E5E5
TextField.degradatedBorderColor.Disabled=#a5b6c0
TextField.degradatedBorderColor.Focused=97;190;232;255~97;190;232;179~97;190;232;102~97;190;232;25

##     border painter     indicates the border for that component. ¡USED ONLY WHEN arcWidth<0 AND arcHeight<0!. A painter is required (gradient, texture or color with or without alpha. See documentation) 
TextField[Enabled].borderPainter_topLine=
TextField[Enabled].borderPainter_secondaryTopLine=
TextField[Enabled].borderPainter_leftLine=
TextField[Enabled].borderPainter_rightLine=
TextField[Enabled].borderPainter_bottomLine=
TextField[Disabled].borderPainter_topLine=
TextField[Disabled].borderPainter_secondaryTopLine=
TextField[Disabled].borderPainter_leftLine=
TextField[Disabled].borderPainter_rightLine=
TextField[Disabled].borderPainter_bottomLine=
TextField[Focused].borderPainter_topLine=
TextField[Focused].borderPainter_secondaryTopLine=
TextField[Focused].borderPainter_leftLine=
TextField[Focused].borderPainter_rightLine=
TextField[Focused].borderPainter_bottomLine=
TextField[Focused].borderPainter_focusBorder=
TextField[Focused].borderPainter_focusInnerShadow=#CACACA


TextField.background
TextField.foreground=
TextField.disabled=
TextField.disabledText=


############################################# TEXTAREA ############################################################
# TEXTAREA (It is included in most of the Ontimize large text data fields

##     font indicates     the font for that component. A three-elements short list value with fontName-fontStyle-fontSize is required (Ex: Calibri-PLAIN-12). 
TextArea.font=

##     contentMargins     indicates the component margins. Four int values splitted by commas are required. The order is top;left;bottom;right 
TextArea.contentMargins=

##     textForeground     indicates the font Color for that component.  A RGB or Hexadecimal value is required (allowing alpha indication as forth value in the RGB
# (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). 
TextArea[Enabled].textForeground=
TextArea[Disabled].textForeground=
TextArea[Focused].textForeground=
TextArea[Selected].textForeground=

##     arcWidth and arcHeight     positive values indicates the component corner arc to round the component. Negative values indicates default Nimbus shape(rectangular).  An int value is required. 
TextArea.arcWidth=0
TextArea.arcHeight=0

##     background     indicates the background for that component. A painter is required (gradient, texture or color with or without alpha. See documentation)
TextArea[Enabled].backgroundPainter_bgPainter=255;255;255
TextArea[Disabled].backgroundPainter_bgPainter=255;255;255;125
TextArea[Selected].backgroundPainter_bgPainter=255;255;255

##     degradatedBorderColor     indicates the border color pixel by pixel for that component (Color order is outside-in). ¡USED ONLY WHEN arcWidth>=0 AND arcHeight>=0 !
# Can be set as RGB or Hexadecimal values as degrated colours desired (splitted by ~). Moreover an alpha value can be added as forth value in the RGB
#(that is R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). A single value indicates a single border.
#(Two-colors-Ex: 255;255;255~0;0;0 or with alpha 255;255;255;50~0;0;0;100 or #ffffff~#000000 or #ffffffcc-#000000cc )
TextArea.degradatedBorderColor.Enabled=#E5E5E5
TextArea.degradatedBorderColor.Disabled=#a5b6c0
TextArea.degradatedBorderColor.Focused=97;190;232;255~97;190;232;179~97;190;232;102~97;190;232;25

##     border painter     indicates the border for that component. ¡USED ONLY WHEN arcWidth<0 AND arcHeight<0!. A painter is required (gradient, texture or color with or without alpha. See documentation) 
TextArea[Enabled].borderPainter_topLine=
TextArea[Enabled].borderPainter_secondaryTopLine=
TextArea[Enabled].borderPainter_leftLine=
TextArea[Enabled].borderPainter_rightLine=
TextArea[Enabled].borderPainter_bottomLine=
TextArea[Disabled].borderPainter_topLine=
TextArea[Disabled].borderPainter_secondaryTopLine=
TextArea[Disabled].borderPainter_leftLine=
TextArea[Disabled].borderPainter_rightLine=
TextArea[Disabled].borderPainter_bottomLine=
TextArea[Focused].borderPainter_topLine=
TextArea[Focused].borderPainter_secondaryTopLine=
TextArea[Focused].borderPainter_leftLine=
TextArea[Focused].borderPainter_rightLine=
TextArea[Focused].borderPainter_bottomLine=
TextArea[Focused].borderPainter_focusBorder=


TextArea.background
TextArea.foreground=
TextArea.disabled=
TextArea.disabledText=


############################################# COMBOBOXFIELD ############################################################
# COMBOBOXFIELD :

##     font indicates     the font for that component. A three-elements short list value with fontName-fontStyle-fontSize is required (Ex: Calibri-PLAIN-12). 
ComboBox.font=Arial-PLAIN-11

##     contentMargins     indicates the component margins. Four int values splitted by commas are required. The order is top;left;bottom;right 
ComboBox.contentMargins=

##     textForeground     indicates the font Color for that component.  A RGB or Hexadecimal value is required (allowing alpha indication as forth value in the RGB
# (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). 
ComboBox[Enabled].textForeground=#335971
ComboBox[Disabled].textForeground=
ComboBox[Focused].textForeground=
ComboBox[Selected].textForeground=

##     arcWidth and arcHeight     positive values indicates the component corner arc to round the component. Negative values indicates default Nimbus shape(rectangular).  An int value is required. 
ComboBox.arcWidth=10
ComboBox.arcHeight=10

##     background     indicates the background for that component. A painter is required (gradient, texture or color with or without alpha. See documentation)
ComboBox[Enabled].backgroundPainter_bgPainter=#FFFFFF
ComboBox[Disabled].backgroundPainter_bgPainter=255;255;255;125
ComboBox[Focused].backgroundPainter_bgPainter=#FFFFFF
ComboBox[Focused+MouseOver].backgroundPainter_bgPainter=#FFFFFF
ComboBox[MouseOver].backgroundPainter_bgPainter=#FFFFFF
ComboBox[Focused+Pressed].backgroundPainter_bgPainter=#FFFFFF
ComboBox[Pressed].backgroundPainter_bgPainter=#FFFFFF

##     background     indicates the background for the editor of the component. A painter is required (gradient, texture or color with or without alpha. See documentation)
ComboBox.textField[Enabled].backgroundPainter_bgPainter=#FFFFFF
ComboBox.textField[Disabled].backgroundPainter_bgPainter=#FFFFFF7D
ComboBox.textField[Selected].backgroundPainter_bgPainter=#FFFFFF


##     degradatedBorderColor     indicates the border color pixel by pixel for that component (Color order is outside-in). ¡USED ONLY WHEN arcWidth>=0 AND arcHeight>=0 !
# Can be set as RGB or Hexadecimal values as degrated colours desired (splitted by ~). Moreover an alpha value can be added as forth value in the RGB
#(that is R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). A single value indicates a single border.
#(Two-colors-Ex: 255;255;255~0;0;0 or with alpha 255;255;255;50~0;0;0;100 or #ffffff~#000000 or #ffffffcc-#000000cc )
ComboBox.degradatedBorderColor.Enabled=#E5E5E5
ComboBox.degradatedBorderColor.Disabled=255;255;255;125
ComboBox.degradatedBorderColor.Focused=97;190;232;255~97;190;232;179~97;190;232;102~97;190;232;25




#############################################   TREE    ############################################################
# TREE (These properties allow users to configure the Jtrees layout and colors. Jtrees are included in the Ontimize Trees among other Ontimize components
# such as, the left panels on the Ontimize Gannt or Ontimize DMS

#    font    indicates the font for that component. A three-elements short list value with fontName-fontStyle-fontSize is required (Ex: Calibri-PLAIN-12). 
Tree.font=

#     rendererFillBackground  indicates when the renderer fill the background (true) or not (false). That is, the space arround the text in the back side. 
# If this property is true, that space will be painted using the the properties: textBackground, selectionBackground. If false, those properties are not used.
Tree.rendererFillBackground=false

#    closedIcon         set the node icon when the node is closed (by default, a closed folder). A string, which indicates a path to a 16x16 icon, is required. (F.ex: com/ontimize/plaf/images/closeIcon.png)
Tree.closedIcon=
#    openIcon           set the node icon when the node is open (by default, an opened folder). A string, which indicates a path to a 16x16 icon, is required.
Tree.openIcon=
#    leafIcon           set the node icon when the node is a leaf (by default, a blatt). A string, which indicates a path to a 16x16 icon, is required.
Tree.leafIcon=
#    collapsedIcon      set the icon that indicates when the node is collapsed (by default, a horizontal arrow of 18x7). If the node has an image icon, the collapsed icon is placed on its left.
Tree.collapsedIcon=
#    expandedIcon       set the icon that indicates when the node is expanded (by default, a horizontal arrow of 7x18). If the node has an image icon, the collapsed icon is placed on its left.
Tree.expandedIcon=

##   contentMargins     indicates the tree margins, that is, margins arround the whole tree. Four int values splitted by commas are required. The order is top;left;bottom;right (by default 0;0;0;0)
Tree.contentMargins=

#    rowHeight          set the height for each row. A positive integer is required (by default, 0)
Tree.rowHeight=

#    rightChildIndent   set the node indentation (to the right). A positive integer is required (by default, 4)
Tree.rightChildIndent=



#    textForeground      indicates the foreground of each node (that is, the text color) for one-level-trees
Tree.textForeground=
#    Tree:TreeCell.textForeground      indicates the foreground of each node (=tree cell) for multiple-level-trees. It has also status.
Tree\:TreeCell[Focused].textForeground=
Tree\:TreeCell[Selected].textForeground=
Tree\:TreeCell[Enabled].textForeground=
Tree\:TreeCell[Disabled].textForeground=

#    selectionForeground      indicates the foreground of each node (that is, the text color) when selected (for both, one or multiple level-trees).  A RGB or Hexadecimal value is required (allowing alpha indication as forth value in the RGB
# (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). 
Tree.selectionForeground=

#    selectionBackground      indicates the background of each node when selected (that is, the area around the text) only if the rendererFillBackground has the value true.
#  A RGB or Hexadecimal value is required (allowing alpha indication as forth value in the RGB (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). 
Tree.selectionBackground=

#    textBackground      indicates the background of each node (that is, the area around the text) only if the rendererFillBackground has the value true.  A RGB 
# or Hexadecimal value is required (allowing alpha indication as forth value in the RGB (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). 
Tree.textBackground=

#    background      indicates the background of the whole tree.  A RGB or Hexadecimal value is required (allowing alpha indication as forth value in the RGB
# (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). 
Tree.background=

##   TODO: to be validated: (Included for Nimbus compatibility)
Tree\:TreeCell[Enabled].background=
Tree\:TreeCell[Focused].background=
Tree\:TreeCell[Enabled+Focused].background=

Tree\:TreeCell[Focused+Selected].backgroundPainter_borderPainter=
Tree\:TreeCell[Focused+Selected].backgroundPainter_bgPainter=
Tree\:TreeCell[Enabled+Focused].backgroundPainter_borderPainter=
Tree\:TreeCell[Enabled+Focused].backgroundPainter_bgPainter=
Tree\:TreeCell[Enabled+Selected].backgroundPainter_borderPainter=
Tree\:TreeCell[Enabled+Selected].backgroundPainter_bgPainter=

############## TREE: CELLEDITOR:

##   contentMargins     indicates the TabbedPane margins, that is, margins arround the whole component. Four int values splitted by commas are required. The order is top;left;bottom;right (by default 2;5;2;5)
\"Tree.cellEditor\".contentMargins=

##   opaque     indicates whether a panel is opaque, that is, when the colours/painters under it will be visible or not (transparent or opaque). A boolean true/false is required (by default, true)
"\"Tree.cellEditor\".opaque=

\"Tree.cellEditor\".background=
\"Tree.cellEditor\"[Disabled].textForeground=
\"Tree.cellEditor\"[Enabled].backgroundPainter=
\"Tree.cellEditor\"[Selected].textForeground=
\"Tree.cellEditor\"[Enabled+Focused].backgroundPainter=







#############################################   TABBEDPANE    ############################################################

##    font    indicates the font for that component. A three-elements short list value with fontName-fontStyle-fontSize is required (Ex: Calibri-PLAIN-12). 
TabbedPane.font=

##   contentMargins     indicates the TabbedPane margins, that is, margins arround the whole component. Four int values splitted by commas are required. The order is top;left;bottom;right (by default 0;0;0;0)
TabbedPane.contentMargins=
##   TabbedPaneContent.contentMargins     indicates the margins in the tab content, that is, the margins arround the elements embedded in the tab. Four int values splitted by commas are required. The order is top;left;bottom;right (by default 0;0;0;0)
TabbedPane\:TabbedPaneContent.contentMargins=
##   TabbedPaneTab.contentMargins     indicates the margins in the tab header, that is, margins arround the tab title. Four int values splitted by commas are required. The order is top;left;bottom;right (by default 0;0;0;0)
TabbedPane\:TabbedPaneTab.contentMargins=
##   TabbedPaneTabArea.contentMargins     indicates the margins arround the tab headers. Four int values splitted by commas are required. The order is top;left;bottom;right (by default 0;0;0;0)
TabbedPane\:TabbedPaneTabArea.contentMargins=

##   foreground        indicates the text color for the tab headers (depending on tab status).  A RGB or Hexadecimal value is required (allowing alpha indication as forth value in the RGB
# (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). 
TabbedPane.foreground=
TabbedPane\:TabbedPaneTab[Enabled].textForeground=
TabbedPane\:TabbedPaneTab[Disabled].textForeground=
TabbedPane\:TabbedPaneTab[Selected].textForeground=
TabbedPane\:TabbedPaneTab[Focused].textForeground=

##     background     indicates the background for that component. A painter is required (gradient, texture or color with or without alpha. See documentation)
TabbedPane\:TabbedPaneContent[Enabled].backgroundPainter_bgPainter=#517286

##     degradatedBorderColor     indicates the border color for that component 
# Can be set as RGB or Hexadecimal values as degrated colours desired. Moreover an alpha value can be added as forth value in the RGB
#(that is R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). 
#(Ex: 255;255;255 or with alpha 255;255;255;50 or #ffffff or #ffffffcc )
TabbedPane[Enabled].borderPainter=#000000


##    tabOverlap         indicates the number of pixels that each tap is over its nearby tabs. A negative int value is required (by default -1)
#If non-zero, tabOverlap indicates the amount that the tab bounds should be altered such that they would overlap with a tab on either the leading or trailing end 
#of a run (ie: in TOP, this would be on the left or right)l. A positive overlap indicates that tabs should overlap right/down, while a negative overlap indicates 
#tha tabs should overlap left/up. When tabOverlap is specified, it both changes the x position and width of the tab if in TOP or BOTTOM placement, and changes the
#y position and height if in LEFT or RIGHT placement.
#This is done for the following reason. Consider a run of 10 tabs. There are 9 gaps between these tabs. If you specified a tabOverlap of "-1", then each of the 
#tabs "x" values will be shifted left. This leaves 9 pixels of space to the right of the right-most tab unpainted. So, each tab's width is also extended by 1 pixel to make up the difference.
TabbedPane.tabOverlap=

#     extendTabsToBase      When a tabbed pane has multiple rows of tabs, this indicates whether the tabs in the upper row(s) should extend to the base of the tab
# area, or whether they should remain at their normal tab height. This does not affect the bounds of the tabs, only the bounds of area painted by the tabs.
# The text position does not change. The result is that the bottom border of the upper row of tabs becomes fully obscured by the lower tabs, resulting in a cleaner look.
# A boolean value is required (by default, false)
TabbedPane.extendTabsToBase=

#   tabAreaStatesMatchSelectedTab     indicates where the tab area is painted differently depending on the state for the selected tab. A boolean value is required (by default, true)
TabbedPane.tabAreaStatesMatchSelectedTab=

#   tabAreaStatesMatchSelectedTab     ensures that the labels don't move whether the tab is selected or not. A boolean value is required (by default, false)
TabbedPane.nudgeSelectedLabel=

#   useBasicArrows          to use the basic arrow buttons UIManager is queried directly. A boolean value is required (by default, true)
TabbedPane.useBasicArrows=



#HOW TO DEFINE A PAINTER:
#A) BASED ON GRADIENT: Fill following configuration properties concated by ¬.
#   		float[] fractions (splitted by ~) ¬ Color[] Color (splitted by ~ and valid with alpha) ¬ CycleMethod NO_CYCLE, REFLECT o REPEAT (optional) ¬ Direction for the degradate (optional) ¬ Points (optional)
#1.- FRACTIONS: They indicates the percentage of the area which is filled by each color. Float numbers (in the range 0 to 1) splitted by ~ are required. For instance: 0.0f~0.5f~1.0f
#2.- COLOURS: They indicate the colors to fill the areas between fractions. Colors in hexadecimal or R;G;B (with our without alpha) splitted by ~ are required. For instance: 158;191;230;50~111;161;217;50~99;132;169;50
#3.- CycleMethod: Has one of the next values:  By default, CycleMethod.NO_CYCLE.
#        NO_CYCLE: Use the terminal colors to fill the remaining area.
#        REFLECT: Cycle the gradient colors start-to-end, end-to-start to fill the remaining area.
#        REPEAT: Cycle the gradient colors start-to-end, start-to-end to fill the remaining area.
#4.- DIRECTION: Indicates the direction in which run the parallel bands of color that determines the gradient:  By default, HORIZONTAL_DEGRADATED.
#        HORIZONTAL_DEGRADATED: For horizontal parallel bands (0 degrees).
#        VERTICAL_DEGRADATED: For vertical parallel bands (90 degrees).
#        ASCENT_TRANSVERSAL_DEGRADATED: For transversal parallel bands in ascent way (45 degrees).
#        DESCENT_TRANSVERSAL_DEGRADATED: For transversal parallel bands in descent way (135 degrees).
#5.- POINTS: They indicate the x start point, y start point, width and heigt. Float numbers splitted by ~. Optional. If they are not indicated the L&F fill them.
#    
#B) BASED ON IMAGE OR TEXTURE: Additionally, an image or texture can be set, instead of the colours and fractions. For that fact, users must indicate only the path to get it, instead of the previous syntax. 
#    For ex: com/ontimize/plaf/images/miTextura.JPG (valid formats: .jpeg .jpg .JPEG JPG .png .PNG )
#
#C) BASED ON COLOR: This is a simplification of case A), in which ONLY a Color is indicated (in rgb or hexadecimal with or without alpha)

# To configure the border and background of each tab. A painter is required (gradient or texture)
TabbedPane\:TabbedPaneTab[Enabled].backgroundPainter_BorderPainter=
TabbedPane\:TabbedPaneTab[Enabled].backgroundPainter_BgPainter=#E4E4E4
TabbedPane\:TabbedPaneTab[Enabled+MouseOver].backgroundPainter_BorderPainter=
TabbedPane\:TabbedPaneTab[Enabled+MouseOver].backgroundPainter_BgPainter=#CCCCCC
TabbedPane\:TabbedPaneTab[Enabled+Pressed].backgroundPainter_BorderPainter=
TabbedPane\:TabbedPaneTab[Enabled+Pressed].backgroundPainter_BgPainter=#77ACD0
TabbedPane\:TabbedPaneTab[Disabled].backgroundPainter_BorderPainter=
TabbedPane\:TabbedPaneTab[Disabled].backgroundPainter_BgPainter=#969396
TabbedPane\:TabbedPaneTab[Disabled+Selected].backgroundPainter_BorderPainter=
TabbedPane\:TabbedPaneTab[Disabled+Selected].backgroundPainter_BgPainter=#969396
TabbedPane\:TabbedPaneTab[Selected].backgroundPainter_BorderPainter=
TabbedPane\:TabbedPaneTab[Selected].backgroundPainter_BgPainter=#77acd0
TabbedPane\:TabbedPaneTab[MouseOver+Selected].backgroundPainter_BorderPainter=
TabbedPane\:TabbedPaneTab[MouseOver+Selected].backgroundPainter_BgPainter=#77acd0
TabbedPane\:TabbedPaneTab[Pressed+Selected].backgroundPainter_BorderPainter=
TabbedPane\:TabbedPaneTab[Pressed+Selected].backgroundPainter_BgPainter=#77acd0
TabbedPane\:TabbedPaneTab[Focused+Selected].backgroundPainter_BorderPainter=
TabbedPane\:TabbedPaneTab[Focused+Selected].backgroundPainter_BgPainter=#628ca9
TabbedPane\:TabbedPaneTab[Focused+MouseOver+Selected].backgroundPainter_BorderPainter=
TabbedPane\:TabbedPaneTab[Focused+MouseOver+Selected].backgroundPainter_BgPainter=#77acd0
TabbedPane\:TabbedPaneTab[Focused+Pressed+Selected].backgroundPainter_BorderPainter=
TabbedPane\:TabbedPaneTab[Focused+Pressed+Selected].backgroundPainter_BgPainter=#77acd0
#  backgroundPainter_FocusedColor       to configure the selected colour for each tab (rectangle around the tab). 
TabbedPane\:TabbedPaneTab.backgroundPainter_FocusedColor=


# To configure the border and background of each tab area. A painter is required (gradient or texture)
TabbedPane\:TabbedPaneTabArea[Enabled].backgroundPainter_BgPainter=
TabbedPane\:TabbedPaneTabArea[Enabled+MouseOver].backgroundPainter_BgPainter=
TabbedPane\:TabbedPaneTabArea[Enabled+Pressed].backgroundPainter_BgPainter=
TabbedPane\:TabbedPaneTabArea[Disabled].backgroundPainter_BgPainter=
#     borderColor   To configure the border each tab area. A rgb o hexadecimal color with our without alpha. (This is a simplification from option A) 
TabbedPane\:TabbedPaneTabArea[Enabled].backgroundPainter_borderColor=


# Others to set and study when time:
TabbedPane.background=
TabbedPane.darkShadow=
TabbedPane.disabled=
TabbedPane.disabledText=
TabbedPane.highlight=
TabbedPane.isTabRollover=
TabbedPane.shadow=
TabbedPane.tabRunOverlay=

##   foreground painters     indicates how to paint the button. innerBorder is used only if arcWidth and arcHeight <0.
TabbedPane\:\"TabbedPane.button\"[Enabled].foregroundPainter=#BDBDBD
TabbedPane\:\"TabbedPane.button\"[Disabled].foregroundPainter=#D0DAE2
TabbedPane\:\"TabbedPane.button\"[MouseOver].foregroundPainter=#BDBDBD
TabbedPane\:\"TabbedPane.button\"[Pressed].foregroundPainter=#9D9D9D







############################################    MENU BAR      ############################################################

##    font    indicates the font for that component. A three-elements short list value with fontName-fontStyle-fontSize is required (By default, SansSerif-PLAIN-12). 
MenuBar.font=

##   contentMargins     indicates the TabbedPane margins, that is, margins arround the whole component. Four int values splitted by commas are required. The order is top;left;bottom;right (by default Insets (1,12,2,13))
MenuBar.contentMargins=

##   textForeground     text color for menu items. A ColorUIResource is required. (By default, )
MenuBar.foreground=

##   textForeground     text color for menu items when disable. A ColorUIResource is required. (By default, )
MenuBar.disabledText=

##   disabled        the background color of the menu items when disable. A color in RGB or hexadecimal is required.
MenuBar.disabled=

##   background        the background color of the menu items. A color in RGB or hexadecimal is required.
MenuBar.background=
MenuBar[Enabled].backgroundPainter=#1C304B
MenuBar[Enabled].borderPainter_bottomBorder=#1C304B
MenuBar[Enabled].borderPainter_topBorder=#1C304B
MenuBar[Enabled].borderPainter_rightBorder=#1C304B
MenuBar[Enabled].borderPainter_leftBorder=#1C304B

MenuBar.windowBindings=


############## MENU BAR: MENU:
MenuBar:Menu.contentMargins=
MenuBar:Menu:MenuItemAccelerator.contentMargins=
MenuBar:Menu[Enabled].textForeground=
MenuBar:Menu[Disabled].textForeground=
MenuBar:Menu[Selected].textForeground=#1c304b
MenuBar:Menu[Selected].backgroundPainter=#86adbf

MenuBar:Menu[Selected].backgroundPainter_borderPainter=#C6DFE3







#############################################   MENU    ############################################################

##    font    indicates the font for that component. A three-elements short list value with fontName-fontStyle-fontSize is required (By default, SansSerif-PLAIN-12). 
Menu.font=

##   contentMargins     indicates the TabbedPane margins, that is, margins arround the whole component. Four int values splitted by commas are required. The order is top;left;bottom;right (by default 1;12;2;5))
Menu.contentMargins=

##   arrowIcon         icon which indicated more item menus which can be expanded. A string, which indicates a path to a icon, is required. (By default, 9 x 10 icon) (F.ex: com/ontimize/plaf/images/closeIcon.png)
Menu.arrowIcon=


##   textForeground    Menu text color. A color in RGB or hexadecimal with or without alpha is required. (By default, 
Menu[Enabled].textForeground=
Menu[Disabled].textForeground=  

##   background        Menu background color. A color in RGB or hexadecimal with or without alpha is required. (By default, 
Menu.background=

##   backgroundColor   Menu background color when the menu is enable and selected. A color in RGB or hexadecimal with or without alpha is required. (By default, 
Menu[Enabled+Selected].backgroundPainter=
##   iconColor         Menu icon colors. A color in RGB or hexadecimal with or without alpha is required. (By default, 
Menu[Disabled].arrowIconPainter=#0000007D
Menu[Enabled].arrowIconPainter=#FFFFFF7D
Menu[Enabled+Selected].arrowIconPainter=#0000004C

##   TODO: to be validated: (Included for Nimbus compatibility)
Menu.disabledText=
Menu.foreground=
Menu[Enabled+Selected].textForeground=
Menu\:MenuItemAccelerator[MouseOver].textForeground=
Menu\:MenuItemAccelerator.contentMargins=
Menu.disabled=


#############################################   MENUITEM    ############################################################

##    font    indicates the font for that component. A three-elements short list value with fontName-fontStyle-fontSize is required (By default, SansSerif-PLAIN-12). 
MenuItem.font=

##   contentMargins     indicates the TabbedPane margins, that is, margins arround the whole component. Four int values splitted by commas are required. The order is top;left;bottom;right (by default 1;12;2;5))
MenuItem.contentMargins=

##   textIconGap        indicated the space in the menu item. A integer is required. (By default, 5). Take care: menu item width can be defined also by other attributes 
MenuItem.textIconGap=

##   textForeground     text color for menu items. A ColorUIResource is required. (By default, )
MenuItem[Disabled].textForeground=#FFFFFF7D
MenuItem[Enabled].textForeground=#FFFFFF
MenuItem[MouseOver].textForeground=#426A84
##   textForeground     text color for menu item accelerator (this is, the area where the shortcut is painted). A ColorUIResource is required. (By default, )
MenuItem\:MenuItemAccelerator[Disabled].textForeground=
MenuItem\:MenuItemAccelerator[MouseOver].textForeground=#426A84
MenuItem\:MenuItemAccelerator[Enabled].textForeground=#FFFFFF
		
##   background        the background color of the menu items. A color in RGB or hexadecimal (without alpha) is required.
MenuItem.background=
MenuItem.disabled=

##   mouseoverColor   the background color of the menu items when the mouse is over it. A color in RGB or hexadecimal with or without alpha is required.
MenuItem[MouseOver].backgroundPainter=#FFFFFF
MenuItem[Enabled].backgroundPainter=#FFFFFF00
MenuItem[Disabled].backgroundPainter=#FFFFFF00

##   TODO: to be validated: (Included for Nimbus compatibility)
MenuItem.disabledText=
MenuItem.foreground=
MenuItem\:MenuItemAccelerator.contentMargins=




#############################################   RADIO MENU ITEM    ############################################################

##    font    indicates the font for that component. A three-elements short list value with fontName-fontStyle-fontSize is required (By default, SansSerif-PLAIN-12). 
RadioButtonMenuItem.font=

##   contentMargins     indicates the TabbedPane margins, that is, margins arround the whole component. Four int values splitted by commas are required. The order is top;left;bottom;right (by default (1,12,2,13))
RadioButtonMenuItem.contentMargins=

##   textIconGap        indicated the space in the menu item. A integer is required. (By default, 5). Take care: menu item width can be defined also by other attributes 
RadioButtonMenuItem.textIconGap=

##   checkIcon         icon which indicated that a radio item menus is checked. A string, which indicates a path to a icon, is required. (By default, 9 x 10 icon) (F.ex: com/ontimize/plaf/images/closeIcon.png)
RadioButtonMenuItem.checkIcon=

##   textForeground     text color for menu items. A ColorUIResource is required. (By default, )
RadioButtonMenuItem.disabledText=
RadioButtonMenuItem[Disabled].textForeground=#FFFFFF7D
RadioButtonMenuItem[Enabled].textForeground=#FFFFFF
RadioButtonMenuItem[MouseOver].textForeground=#426A84
RadioButtonMenuItem[MouseOver+Selected].textForeground=#426A84
##   textForeground     text color for menu item accelerator (this is, the area where the shortcut is painted). A ColorUIResource is required. (By default, )
RadioButtonMenuItem\:MenuItemAccelerator[Disabled].textForeground=
RadioButtonMenuItem\:MenuItemAccelerator[MouseOver].textForeground=
RadioButtonMenuItem\:MenuItemAccelerator[Enabled].textForeground=
		
##   background        the background color of the menu items. A color in RGB or hexadecimal (without alpha) is required.
RadioButtonMenuItem.background=
RadioButtonMenuItem.disabled=

##   mouseoverColor   the background color of the menu items when the mouse is over it. A color in RGB or hexadecimal with or without alpha is required.
RadioButtonMenuItem[Enabled].backgroundPainter=#FFFFFF00
RadioButtonMenuItem[Disabled].backgroundPainter=#FFFFFF00
RadioButtonMenuItem[MouseOver].backgroundPainter=#FFFFFF
RadioButtonMenuItem[Selected].backgroundPainter=#FFFFFF00
RadioButtonMenuItem[MouseOver+Selected].backgroundPainter=#FFFFFF

RadioButtonMenuItem[Disabled+Selected].checkIconPainter=
RadioButtonMenuItem[Enabled+Selected].checkIconPainter=
RadioButtonMenuItem[MouseOver+Selected].checkIconPainter=

##   TODO: to be validated: (Included for Nimbus compatibility)
RadioButtonMenuItem.foreground=
RadioButtonMenuItem\:MenuItemAccelerator.contentMargins=







#############################################   CHECK BOX MENU ITEM    ############################################################

##    font    indicates the font for that component. A three-elements short list value with fontName-fontStyle-fontSize is required (By default, SansSerif-PLAIN-12). 
CheckBoxMenuItem.font=

##   contentMargins     indicates the TabbedPane margins, that is, margins arround the whole component. Four int values splitted by commas are required. The order is top;left;bottom;right (by default Insets (1,12,2,13))
CheckBoxMenuItem.contentMargins=

##   textIconGap        indicated the space in the menu item. A integer is required. (By default, 5). Take care: menu item width can be defined also by other attributes 
CheckBoxMenuItem.textIconGap=

##   checkIcon         icon which indicated that a check box menu item is checked. A string, which indicates a path to a icon, is required. (By default, 9 x 10 icon) (F.ex: com/ontimize/plaf/images/closeIcon.png)
CheckBoxMenuItem.checkIcon=

##   textForeground     text color for menu items. A ColorUIResource is required. (By default, )
CheckBoxMenuItem.disabledText=
CheckBoxMenuItem[Disabled].textForeground=#FFFFFF7D
CheckBoxMenuItem[Enabled].textForeground=#FFFFFF
CheckBoxMenuItem[MouseOver].textForeground=#426A84
CheckBoxMenuItem[MouseOver+Selected].textForeground=#426A84
##   textForeground     text color for menu item accelerator (this is, the area where the shortcut is painted). A ColorUIResource is required. (By default, )
CheckBoxMenuItem\:MenuItemAccelerator[MouseOver].textForeground=
		
##   background        the background color of the menu items. A color in RGB or hexadecimal (without alpha) is required.
CheckBoxMenuItem.background=
CheckBoxMenuItem.disabled=

##   mouseoverColor   the background color of the menu items when the mouse is over it. A color in RGB or hexadecimal with or without alpha is required.
CheckBoxMenuItem[Enabled].backgroundPainter=#FFFFFF00
CheckBoxMenuItem[Disabled].backgroundPainter=#FFFFFF00
CheckBoxMenuItem[MouseOver].backgroundPainter=#FFFFFF
CheckBoxMenuItem[Selected].backgroundPainter=#FFFFFF00
CheckBoxMenuItem[MouseOver+Selected].backgroundPainter=#FFFFFF

CheckBoxMenuItem[Disabled+Selected].checkIconPainter=
CheckBoxMenuItem[Enabled+Selected].checkIconPainter=
CheckBoxMenuItem[MouseOver+Selected].checkIconPainter=

##   TODO: to be validated: (Included for Nimbus compatibility)
CheckBoxMenuItem\:MenuItemAccelerator.contentMargins=



#############################################   SCROLL PANE    ############################################################

##   contentMargins     indicates the scroll bar margins, that is, margins arround the whole component. Four int values splitted by commas are required. The order is top;left;bottom;right (by default Insets (0,0,0,0))
ScrollPane.contentMargins=

##     arcWidth and arcHeight     positive values indicates the component corner arc to round the component. Negative values indicates default Nimbus shape(rectangular).  An int value is required. 
ScrollPane.arcWidth=0
ScrollPane.arcHeight=0


#############################################   SCROLL BAR    ############################################################

##    font    indicates the font for that component. A three-elements short list value with fontName-fontStyle-fontSize is required (By default, SansSerif-PLAIN-12). 
ScrollBar.font=

##   contentMargins     indicates the scroll bar margins, that is, margins arround the whole component. Four int values splitted by commas are required. The order is top;left;bottom;right (by default Insets (0,0,0,0))
ScrollBar.contentMargins=

##   arcWidth and arcHeight     indicates the thumb corner arc. An int value is required. A positive value indicates a rounded rect, a zero value indicates a rect, and a negative value indicates the Nimbus scroll bar button shape.
ScrollBar.arcWidth=10
ScrollBar.arcHeight=10

##   decrementButtonGap & incrementButtonGap  indicated the space between the scroll bar arrows and the bar painted in the scroll bar gap. An integer is required, negative to be over the arrow or positive to be separated (By default, -8).
ScrollBar.decrementButtonGap=
ScrollBar.incrementButtonGap=

##   opaque         indicates when the component must be opaque or no. A boolean value is required. WARNING: It is a required value (by default must be true)
ScrollBar.opaque=true

##   thumbHeight    indicates the height of the scroll bar. A positive integer value is required (by default 15)
ScrollBar.thumbHeight=

##   thumbHeight    indicates the maximum and minimum thum dimension. Two positive integer value is required splitted by; are required (by default 1000;1000 and 29;29 respectively)
ScrollBar.maximumThumbSize=
ScrollBar.minimumThumbSize=

		
##   background, disabled, foreground, disabledText         colors of the scroll bar. A color in RGB or hexadecimal (with our without alpha) is required.
ScrollBar.background=
ScrollBar.disabled=
ScrollBar.foreground=
ScrollBar.disabledText=

##   painters           indicates how to paint border in each status.
ScrollBar.borderColor.Enabled=#FFFFFF
ScrollBar.borderColor.Disabled=#FFFFFF
ScrollBar.borderColor.Focused=#FFFFFF



############## SCROLL BAR: BUTTON:
ScrollBar\:ScrollBar.button.contentMargins=
ScrollBar\:ScrollBar.button.size=

##   arcWidth and arcHeight     indicates the thumb corner arc. An int value is required. A positive value indicates a rounded rect, a zero value indicates a rect, and a negative value indicates the Nimbus scroll bar button shape.
ScrollBar\:\"ScrollBar.button\".arcWidth=10
ScrollBar\:\"ScrollBar.button\".arcHeight=10
##   borderthickness     indicates the thumb border thickness when arcWidth/Height is >=0. A positive int not bigger than 6 is required.
ScrollBar\:\"ScrollBar.button\".borderthickness=

##   foreground painters     indicates how to paint the button. innerBorder is used only if arcWidth and arcHeight <0.
ScrollBar\:\"ScrollBar.button\"[Enabled].foregroundPainter=#BDBDBD
ScrollBar\:\"ScrollBar.button\"[Enabled].foregroundPainter_outerBorder=
ScrollBar\:\"ScrollBar.button\"[Enabled].foregroundPainter_arrow=#FFFFFF
ScrollBar\:\"ScrollBar.button\"[Enabled].foregroundPainter_innerBorder=
ScrollBar\:\"ScrollBar.button\"[Disabled].foregroundPainter=#D0DAE2
ScrollBar\:\"ScrollBar.button\"[MouseOver].foregroundPainter=#BDBDBD
ScrollBar\:\"ScrollBar.button\"[MouseOver].foregroundPainter_outerBorder=
ScrollBar\:\"ScrollBar.button\"[MouseOver].foregroundPainter_arrow=#FFFFFF
ScrollBar\:\"ScrollBar.button\"[MouseOver].foregroundPainter_innerBorder=
ScrollBar\:\"ScrollBar.button\"[Pressed].foregroundPainter=#9D9D9D
ScrollBar\:\"ScrollBar.button\"[Pressed].foregroundPainter_outerBorder=
ScrollBar\:\"ScrollBar.button\"[Pressed].foregroundPainter_arrow=#FFFFFF
ScrollBar\:\"ScrollBar.button\"[Pressed].foregroundPainter_innerBorder=


############## SCROLL BAR: THUMB:
##   contentMargins     indicates the thumb margins, that is, margins arround the thumb. Four int values splitted by commas are required. The order is top;left;bottom;right (by default Insets (0,0,0,0))
ScrollBar\:ScrollBarThumb.contentMargins=
##   arcWidth and arcHeight     indicates the thumb corner arc. An int value is required. A positive value indicates a rounded rect, a zero value indicates a rect, and a negative value indicates the Nimbus scroll bar thumb shape.
ScrollBar\:ScrollBarThumb.arcWidth=10
ScrollBar\:ScrollBarThumb.arcHeight=10
##   borderthickness     indicates the thumb border thickness when arcWidth/Height is >=0. A positive int not bigger than 6 is required.
ScrollBar\:ScrollBarThumb.borderthickness=
##   painters           indicates how to paint each area in each status. 
ScrollBar\:ScrollBarThumb[Enabled].backgroundPainter=#36627F
ScrollBar\:ScrollBarThumb[Enabled].backgroundPainter_border=#36627F
ScrollBar\:ScrollBarThumb[Enabled].backgroundPainter_innershadow=#FFFFFF25
ScrollBar\:ScrollBarThumb[Enabled].backgroundPainter_upperCorner=
ScrollBar\:ScrollBarThumb[Enabled].backgroundPainter_lowerCorner=
ScrollBar\:ScrollBarThumb[MouseOver].backgroundPainter=#36627F
ScrollBar\:ScrollBarThumb[MouseOver].backgroundPainter_border=#36627F
ScrollBar\:ScrollBarThumb[MouseOver].backgroundPainter_innershadow=#FFFFFF25
ScrollBar\:ScrollBarThumb[MouseOver].backgroundPainter_upperCorner=
ScrollBar\:ScrollBarThumb[MouseOver].backgroundPainter_lowerCorner=
ScrollBar\:ScrollBarThumb[Pressed].backgroundPainter=#36627F
ScrollBar\:ScrollBarThumb[Pressed].backgroundPainter_border=#36627F
ScrollBar\:ScrollBarThumb[Pressed].backgroundPainter_innershadow=#FFFFFF25
ScrollBar\:ScrollBarThumb[Pressed].backgroundPainter_upperCorner=
ScrollBar\:ScrollBarThumb[Pressed].backgroundPainter_lowerCorner=

############## SCROLL BAR: TRACK:
ScrollBar\:ScrollBarTrack.contentMargins=
ScrollBar\:ScrollBarTrack[Disabled].backgroundPainter=#EEF1F4
ScrollBar\:ScrollBarTrack[Enabled].backgroundPainter=#E6E6E6
#ScrollBar\:ScrollBarTrack[Enabled].backgroundPainter_upperCorner=
#ScrollBar\:ScrollBarTrack[Enabled].backgroundPainter_lowerCorner=
#ScrollBar\:ScrollBarTrack[Enabled].backgroundPainter_upperShadow=
#ScrollBar\:ScrollBarTrack[Enabled].backgroundPainter_lowerShadow=


##   properties added to be compatible with Nimbus due to it exist as keys in the Nimbus LAF. However, it has not value in Nimbus.
ScrollBar.ancestorInputMap=
ScrollBar.ancestorInputMap.RightToLeft=





#############################################   PANEL    ############################################################

##    font    indicates the font for that component. A three-elements short list value with fontName-fontStyle-fontSize is required (By default, SansSerif-PLAIN-12). 
Panel.font=

##   contentMargins     indicates the panel margins, that is, margins arround the whole component. Four int values splitted by commas are required. The order is top;left;bottom;right (by default 0;0;0;0)
Panel.contentMargins=

##   opaque     indicates whether a panel is opaque, that is, when the colours/painters under it will be visible or not (transparent or opaque). A boolean true/false is required (by default, true)
Panel.opaque=true

##   background        the background color of the panels. A color in RGB or hexadecimal is required. By default: 214;217;223
Panel.background=

##   bgPainter        the painter for the background of the panels. A texture, gradient, image or solid color can be configured (see info)
Panel[Enabled].backgroundPainter_bgPainter=

##   TODO: to be validated (note: review first Ontimize)
Panel.foreground=
Panel.disabled=
Panel.disabledText=


#############################################   TOOLTIP    ############################################################

##    font    indicates the font for that component. A three-elements short list value with fontName-fontStyle-fontSize is required (By default, SansSerif-PLAIN-12). 
ToolTip.font=

##   contentMargins     indicates the ToolTip margins, that is, margins arround the whole component. Four int values splitted by commas are required. The order is top;left;bottom;right (by default 4;4;4;4))
ToolTip.contentMargins=


ToolTip[Enabled].backgroundPainter_bgPainter=
ToolTip[Enabled].backgroundPainter_rightBorder=
ToolTip[Enabled].backgroundPainter_leftBorder=
ToolTip[Enabled].backgroundPainter_bottomBorder=
ToolTip[Enabled].backgroundPainter_topBorder=


##   TODO: to be validated 
##   foreground        indicates the text color for the ToolTip.  A RGB or Hexadecimal value is required (allowing alpha indication as forth value in the RGb (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). 
ToolTip.foreground=
##   disabledText        indicates the text color for the ToolTip  when disabled. A RGB or Hexadecimal value is required (allowing alpha indication as forth value in the RGb (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). By default: 0;0;0 
ToolTip.disabledText=
##   background        the background color of the ToolTips. A color in RGB or hexadecimal is required. By default: 214;217;223
ToolTip.background=
##   disabled        the background color of the ToolTips when disabled. A color in RGB or hexadecimal is required. By default: 214;217;223
ToolTip.disabled=






#############################################   LABEL    ############################################################

##    font    indicates the font for that component. A three-elements short list value with fontName-fontStyle-fontSize is required (By default, SansSerif-PLAIN-12). 
Label.font=

##   contentMargins     indicates the Label margins, that is, margins arround the whole component. Four int values splitted by commas are required. The order is top;left;bottom;right (by default 0;0;0;0))
Label.contentMargins=

##   disabled        the background color of the Labels when disabled. A color in RGB or hexadecimal is required. By default: 214;217;223
Label.disabled=

##   background        the background color of the Labels. A color in RGB or hexadecimal is required. By default: 214;217;223
Label.background=

##   disabledText        indicates the text color for the Label  when disabled. A RGB or Hexadecimal value is required (allowing alpha indication as forth value in the RGb (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). By default: 142;143;145 
Label.disabledText=

##   foreground        indicates the text color for the Label.  A RGB or Hexadecimal value is required (allowing alpha indication as forth value in the RGb (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). By default: 142;143;145 
Label.foreground=
Label[Disabled].textForeground=








#############################################   TOOLBAR    ############################################################

##    font    indicates the font for that component. A three-elements short list value with fontName-fontStyle-fontSize is required (By default, SansSerif-PLAIN-12). 
ToolBar.font=

##   contentMargins     indicates the toolBar margins, that is, margins arround the whole component. Four int values splitted by commas are required. The order is top;left;bottom;right (by default 2;2;2;2))
ToolBar.contentMargins=

##   opaque     indicates whether a toolBar is opaque, that is, when the colours/painters under it will be visible or not (transparent or opaque). A boolean true/false is required (by default, true)
ToolBar.opaque=

##   disabledText        indicates the text color for the toolBar  when disabled. A RGB or Hexadecimal value is required (allowing alpha indication as forth value in the RGb (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). By default: 0;0;0 
ToolBar.disabledText=

##   foreground        indicates the text color for the toolBar.  A RGB or Hexadecimal value is required (allowing alpha indication as forth value in the RGb (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). By default: 142;143;145 
ToolBar.foreground=

ToolBar.ancestorInputMap=
ToolBar.handleIcon=

##   disabled        the background color of the toolBars when disabled. A color in RGB or hexadecimal is required. By default: 214;217;223
ToolBar.disabled=

##   background        the background color of the toolBars. A color in RGB or hexadecimal is required. By default: 214;217;223
Toolbar.useTextureImage=
ToolBar.background=
ToolBar[North].backgroundPainter_bgPainter=
ToolBar[East].backgroundPainter_bgPainter=
ToolBar[South].backgroundPainter_bgPainter=
ToolBar[West].backgroundPainter_bgPainter=

ToolBar[North].borderPainter=
ToolBar[East].borderPainter=
ToolBar[South].borderPainter=
ToolBar[West].borderPainter=


############## TOOLBAR: BUTTON:
ToolBar\:Button.contentMargins=
ToolBar\:Button[Enabled].textForeground=

ToolBar\:Button[Focused].backgroundPainter_focusedBorder=
ToolBar\:Button[MouseOver].backgroundPainter_borderShadow=
ToolBar\:Button[MouseOver].backgroundPainter_border=
ToolBar\:Button[MouseOver].backgroundPainter_bgPainter=
ToolBar\:Button[Focused+MouseOver].backgroundPainter_focusedBorder=
ToolBar\:Button[Focused+MouseOver].backgroundPainter_border=
ToolBar\:Button[Focused+MouseOver].backgroundPainter_bgPainter=
ToolBar\:Button[Pressed].backgroundPainter_borderShadow=
ToolBar\:Button[Pressed].backgroundPainter_border=
ToolBar\:Button[Pressed].backgroundPainter_bgPainter=
ToolBar\:Button[Focused+Pressed].backgroundPainter_focusedBorder=
ToolBar\:Button[Focused+Pressed].backgroundPainter_border=
ToolBar\:Button[Focused+Pressed].backgroundPainter_bgPainter=
ToolBar\:Button[Enabled].backgroundPainter_borderShadow=
ToolBar\:Button[Enabled].backgroundPainter_border=
ToolBar\:Button[Enabled].backgroundPainter_bgPainter=


############## TOOLBAR: TOOGLE BUTTON:
ToolBar\:ToggleButton.contentMargins=
ToolBar\:ToggleButton[Enabled].textForeground=
ToolBar\:ToggleButton[Disabled+Selected].textForeground=
		
ToolBar\:ToggleButton[Focused].backgroundPainter_focusedBorder=
ToolBar\:ToggleButton[MouseOver].backgroundPainter_borderShadow=
ToolBar\:ToggleButton[MouseOver].backgroundPainter_border=
ToolBar\:ToggleButton[MouseOver].backgroundPainter_bgPainter=
ToolBar\:ToggleButton[Focused+MouseOver].backgroundPainter_focusedBorder=
ToolBar\:ToggleButton[Focused+MouseOver].backgroundPainter_border=
ToolBar\:ToggleButton[Focused+MouseOver].backgroundPainter_bgPainter=
ToolBar\:ToggleButton[Pressed].backgroundPainter_borderShadow=
ToolBar\:ToggleButton[Pressed].backgroundPainter_border=
ToolBar\:ToggleButton[Pressed].backgroundPainter_bgPainter=
ToolBar\:ToggleButton[Focused+Pressed].backgroundPainter_focusedBorder=
ToolBar\:ToggleButton[Focused+Pressed].backgroundPainter_border=
ToolBar\:ToggleButton[Focused+Pressed].backgroundPainter_bgPainter=
ToolBar\:ToggleButton[Selected].backgroundPainter_focusedBorder=
ToolBar\:ToggleButton[Selected].backgroundPainter_border=
ToolBar\:ToggleButton[Selected].backgroundPainter_bgPainter=
ToolBar\:ToggleButton[Focused+Selected].backgroundPainter_focusedBorder=
ToolBar\:ToggleButton[Focused+Selected].backgroundPainter_border=
ToolBar\:ToggleButton[Focused+Selected].backgroundPainter_bgPainter=
ToolBar\:ToggleButton[Selected+Pressed].backgroundPainter_focusedBorder=
ToolBar\:ToggleButton[Selected+Pressed].backgroundPainter_border=
ToolBar\:ToggleButton[Selected+Pressed].backgroundPainter_bgPainter=
ToolBar\:ToggleButton[Focused+Pressed+Selected].backgroundPainter_focusedBorder=
ToolBar\:ToggleButton[Focused+Pressed+Selected].backgroundPainter_border=
ToolBar\:ToggleButton[Focused+Pressed+Selected].backgroundPainter_bgPainter=
ToolBar\:ToggleButton[MouseOver+Selected].backgroundPainter_focusedBorder=
ToolBar\:ToggleButton[MouseOver+Selected].backgroundPainter_border=
ToolBar\:ToggleButton[MouseOver+Selected].backgroundPainter_bgPainter=
ToolBar\:ToggleButton[Focused+MouseOver+Selected].backgroundPainter_focusedBorder=
ToolBar\:ToggleButton[Focused+MouseOver+Selected].backgroundPainter_border=
ToolBar\:ToggleButton[Focused+MouseOver+Selected].backgroundPainter_bgPainter=
ToolBar\:ToggleButton[Disabled+Selected].backgroundPainter_focusedBorder=
ToolBar\:ToggleButton[Disabled+Selected].backgroundPainter_border=
ToolBar\:ToggleButton[Disabled+Selected].backgroundPainter_bgPainter=

ToolBar\:ToggleButton[Enabled].backgroundPainter_borderShadow=
ToolBar\:ToggleButton[Enabled].backgroundPainter_border=
ToolBar\:ToggleButton[Enabled].backgroundPainter_bgPainter=







#############################################   TOOLBARSEPARATOR    ############################################################

##   contentMargins     indicates the tool bar separator margins, that is, margins arround the whole component. Four int values splitted by commas are required. The order is top;left;bottom;right (by default 2;0;3;2))
ToolBar.contentMargins=
ToolBarSeparator[Enabled].backgroundPainter_bgPainter=









#############################################   POPUP MENU    ############################################################

##    font    indicates the font for that component. A three-elements short list value with fontName-fontStyle-fontSize is required (By default, SansSerif-PLAIN-12). 
PopupMenu.font=

##   contentMargins     indicates the PopupMenu margins, that is, margins arround the whole component. Four int values splitted by commas are required. The order is top;left;bottom;right (by default 0;0;0;0))
PopupMenu.contentMargins=

##   opaque     indicates whether a PopupMenu is opaque, that is, when the colours/painters under it will be visible or not (transparent or opaque). A boolean true/false is required (by default, true)
ToolBar.opaque=

##   disabled        the background color of the PopupMenus when disabled. A color in RGB or hexadecimal is required. By default: 214;217;223
PopupMenu.disabled=

##   background        the background color of the PopupMenus. A color in RGB or hexadecimal with or without alpha is required. By default: 214;217;223
PopupMenu.background=

##   disabledText        indicates the text color for the PopupMenu  when disabled. A RGB or Hexadecimal value is required (allowing alpha indication as forth value in the RGb (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). By default: 142;143;145 
PopupMenu.disabledText=

##   foreground        indicates the text color for the PopupMenu.  A RGB or Hexadecimal value is required (allowing alpha indication as forth value in the RGb (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). By default: 142;143;145 
PopupMenu.foreground=

##   consumeEventOnClose   indicates when events when the popup is closed.  A boolean value is required (true, by default)
PopupMenu.consumeEventOnClose=

##   painters        painters to set the border color and background depending on status. Popup menus are popullated with menus and menuitems, so, their painters can act over the pop-up painters
PopupMenu[Disabled].backgroundPainter_borderPainter=#c6dfe3
PopupMenu[Disabled].backgroundPainter_bgPainter=0.0f~1.0f¬140;190;198~99;134;140
PopupMenu[Enabled].backgroundPainter_borderPainter=#c6dfe3
PopupMenu[Enabled].backgroundPainter_bgPainter=0.0f~1.0f¬#86adbf~#65828f







#############################################   POPUP MENU SEPARATOR   ############################################################

##    font    indicates the font for that component. A three-elements short list value with fontName-fontStyle-fontSize is required (By default, SansSerif-PLAIN-12). 
PopupMenuSeparator.font=

##   contentMargins     indicates the PopupMenuSeparator margins, that is, margins arround the whole component. Four int values splitted by commas are required. The order is top;left;bottom;right (by default 1;0;2;0))
PopupMenuSeparator.contentMargins=

##   disabled        the background color of the PopupMenuSeparators when disabled. A color in RGB or hexadecimal is required. By default: 214;217;223
PopupMenuSeparator.disabled=

##   background        the background color of the PopupMenuSeparators. A color in RGB or hexadecimal with or without alpha is required. By default: 214;217;223
PopupMenuSeparator.background=

##   disabledText        indicates the text color for the PopupMenuSeparator  when disabled. A RGB or Hexadecimal value is required (allowing alpha indication as forth value in the RGb (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). By default: 0;0;0
PopupMenuSeparator.disabledText=

##   foreground        indicates the text color for the PopupMenuSeparator.  A RGB or Hexadecimal value is required (allowing alpha indication as forth value in the RGb (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). By default: 0;0;0
PopupMenuSeparator.foreground=

##   painters        painters depending on status. 
PopupMenuSeparator[Enabled].backgroundPainter_bgPainter=#0000007D
##   thickness       separator thickness used by the painter. Int values from 0 to 3 are allowed. 
PopupMenuSeparator[Enabled].thickness=3









#############################################   SEPARATOR    ############################################################

##    font    indicates the font for that component. A three-elements short list value with fontName-fontStyle-fontSize is required (By default, SansSerif-PLAIN-12). 
Separator.font=

##   contentMargins     indicates the Separator margins, that is, margins arround the whole component. Four int values splitted by commas are required. The order is top;left;bottom;right (by default 0;0;0;0))
Separator.contentMargins=

##   disabled        the background color of the Separators when disabled. A color in RGB or hexadecimal is required. By default: 214;217;223
Separator.disabled=

##   background        the background color of the Separators. A color in RGB or hexadecimal is required. By default: 214;217;223
Separator.background=

##   disabledText        indicates the text color for the Separator  when disabled. A RGB or Hexadecimal value is required (allowing alpha indication as forth value in the RGb (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). By default: 0;0;0
Separator.disabledText=

##   foreground        indicates the text color for the Separator.  A RGB or Hexadecimal value is required (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). By default: 0;0;0 
Separator.foreground=
Separator[Enabled].backgroundPainter_bgPainter=#00000033








#############################################   SPLITPANE    ############################################################

##    font    indicates the font for that component. A three-elements short list value with fontName-fontStyle-fontSize is required (By default, SansSerif-PLAIN-12). 
SplitPane.font=

##   contentMargins     indicates the SplitPane margins, that is, margins arround the whole component. Four int values splitted by commas are required. The order is top;left;bottom;right (by default 0;0;0;0))
SplitPane.contentMargins=

##   disabled        the background color of the SplitPanes when disabled. A color in RGB or hexadecimal is required. By default: 214;217;223
SplitPane.disabled=

##   background        the background color of the SplitPanes. A color in RGB or hexadecimal is required. By default: 214;217;223
SplitPane.background=

##   disabledText        indicates the text color for the SplitPane  when disabled. A RGB or Hexadecimal value is required (allowing alpha indication as forth value in the RGb (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). By default: 0;0;0
SplitPane.disabledText=

##   foreground        indicates the text color for the SplitPane.  A RGB or Hexadecimal value is required (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). By default: 0;0;0 
SplitPane.foreground=

##   size        the size of the Split Pane. An int value is required. By default: 10.
SplitPane.size=

##   centerOneTouchButtons    indicates whether the split pane buttons are centered. A boolean value is requiered. By default: true
SplitPane.centerOneTouchButtons=

##   oneTouchButtonOffset     the offset for the split pane button
SplitPane.oneTouchButtonOffset=

##   oneTouchExpandable        indicates when the SplitPane will be expanded with a single touch. A boolean value is requiered. By default: false
SplitPane.oneTouchExpandable=

##   continuousLayout        indicates when the SplitPane is repainted pixel by pixel during the expansion or not. A boolean value is requiered. By default: true
SplitPane.continuousLayout=

SplitPane.ancestorInputMap=

##   dividerSize        indicates the size for the SplitPane divider.  An int value is required. By default: 10.
SplitPane.dividerSize=

############## SPLITPANE: SPLITPANEDIVIDER: (foregroundPainters are the painter for the arrow(s) or button(s) to move the split)
SplitPane\:SplitPaneDivider.contentMargins=
SplitPane\:SplitPaneDivider[Enabled].backgroundPainter_bgPainter=#E6E6E6
SplitPane\:SplitPaneDivider[Focused].backgroundPainter_bgPainter=#E6E6E6
SplitPane\:SplitPaneDivider[Enabled].foregroundPainter_borderPainter=#FFFFFF
SplitPane\:SplitPaneDivider[Enabled].foregroundPainter_bgPainter=#AAAAAA7D
SplitPane\:SplitPaneDivider[Enabled+Vertical].foregroundPainter_borderPainter=#FFFFFF
SplitPane\:SplitPaneDivider[Enabled+Vertical].foregroundPainter_bgPainter=#AAAAAA7D







#############################################   BUTTON    ############################################################

##    font    indicates the font for that component. A three-elements short list value with fontName-fontStyle-fontSize is required (By default, SansSerif-PLAIN-12). 
Button.font=

##   contentMargins     indicates the Button margins, that is, margins arround the whole component. Four int values splitted by commas are required. The order is top;left;bottom;right (by default 6;14;6;14))
Button.contentMargins=

##   disabled        the background color of the Labels when disabled. A color in RGB or hexadecimal is required. By default: 214;217;223
Button.disabled=

##   background        the background color of the Labels. A color in RGB or hexadecimal is required. By default: 214;217;223
Button.background=

##   disabledText        indicates the text color for the Label  when disabled. A RGB or Hexadecimal value is required (allowing alpha indication as forth value in the RGb (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). By default: 142;143;145 
Button.disabledText=

##   foreground        indicates the text color for the Label.  A RGB or Hexadecimal value is required (allowing alpha indication as forth value in the RGb (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). By default: 142;143;145 
Button.foreground=
Button[Disabled].textForeground=
Button[Default+Pressed].textForeground=


Button.focusInputMap
Button.defaultButtonFollowsFocus


##   painters        painters to set the border color and background depending on status. Border is only avaliable when background is configured (in order to allow users to have transparent buttons). When background is configured, border is set to the indicated value or the default one (if no value is indicated)
Button[Default].backgroundPainter_border=
Button[Default].backgroundPainter_bgPainter=
Button[Default+Focused].backgroundPainter_border=
Button[Default+Focused].backgroundPainter_bgPainter=
Button[Default+MouseOver].backgroundPainter_border=
Button[Default+MouseOver].backgroundPainter_bgPainter=
Button[Default+Focused+MouseOver].backgroundPainter_border=
Button[Default+Focused+MouseOver].backgroundPainter_bgPainter=
Button[Default+Pressed].backgroundPainter_border=
Button[Default+Pressed].backgroundPainter_bgPainter=
Button[Default+Focused+Pressed].backgroundPainter_border=
Button[Default+Focused+Pressed].backgroundPainter_bgPainter=
Button[Disabled].backgroundPainter_border=
Button[Disabled].backgroundPainter_bgPainter=
Button[Enabled].backgroundPainter_border=
Button[Enabled].backgroundPainter_bgPainter=
Button[Focused].backgroundPainter_border=
Button[Focused].backgroundPainter_bgPainter=
Button[MouseOver].backgroundPainter_border=
Button[MouseOver].backgroundPainter_bgPainter=
Button[Focused+MouseOver].backgroundPainter_border=
Button[Focused+MouseOver].backgroundPainter_bgPainter=
Button[Pressed].backgroundPainter_border=
Button[Pressed].backgroundPainter_bgPainter=
Button[Focused+Pressed].backgroundPainter_border=
Button[Focused+Pressed].backgroundPainter_bgPainter=






#############################################   TABLE    ############################################################
# // TODO: (BLOCKING) la tabla y table header son machacados por Ontimize (tipo de fuente, color, tamaño, background, insets, .....)

##    font    indicates the font for that component. A three-elements short list value with fontName-fontStyle-fontSize is required (By default, SansSerif-PLAIN-12). 
Table.font=

##   contentMargins     indicates the Table margins, that is, margins arround the whole component. Four int values splitted by commas are required. The order is top;left;bottom;right (by default 0;0;0;0))
Table.contentMargins=

##   opaque     indicates whether a Table is opaque, that is, when the colours/painters under it will be visible or not (transparent or opaque). A boolean true/false is required (by default, true)
Table.opaque=

##   disabledText        indicates the text color for the Table  when disabled. A RGB or Hexadecimal value is required (allowing alpha indication as forth value in the RGb (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). By default: 0;0;0 
Table.disabledText=

##   foreground        indicates the text color for the Table.  A RGB or Hexadecimal value is required (allowing alpha indication as forth value in the RGb (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). By default: 0;0;0 
Table.foreground=
Table.textForeground=

##   disabled        the background color of the Tables when disabled. A color in RGB or hexadecimal is required. By default: 214;217;223
Table.disabled=

##   background        the background color of the Tables. A color in RGB or hexadecimal is required. By default: 214;217;223
Table.background=

Table.ancestorInputMap=
Table.ancestorInputMap.RightToLeft=

##   rightAlignSortArrow     indicates right align. A boolean true/false is required (by default, true)
Table.rightAlignSortArrow=

##   *SortIcon         icons which indicated the ascending and descending Sort. A string, which indicates a path to a icon, is required. (By default, 9 x 10 icon) (F.ex: com/ontimize/plaf/images/closeIcon.png)
Table.ascendingSortIcon=
Table.descendingSortIcon=

##   showGrid     indicates whether the gris is shown or not. A boolean true/false is required (by default, false)
Table.showGrid=

##   rendererUseTableColors     indicates whether the renderer use the table colors or not. A boolean true/false is required (by default, true)
Table.rendererUseTableColors=

##   rendererUseTableColors     indicates whether the renderer use the UI border or not. A boolean true/false is required (by default, true)
Table.rendererUseUIBorder=

##   alternateRowColor        the even row color of the grids. A color in RGB or hexadecimal is required. By default: 242;242;242
Table.alternateRowColor=
##   dropLineColor        the drop line color of the Tables. A color in RGB or hexadecimal is required. By default: 115;164;209
Table.dropLineColor=
##   dropLineShortColor        the drop line  color of the Tables when shorted. A color in RGB or hexadecimal is required. By default: 191;98;4
Table.dropLineShortColor=


##   cellNoFocusBorder     indicates the border margins. Four int values splitted by commas are required. The order is top;left;bottom;right (by default 2;5;2;5))
Table.cellNoFocusBorder=

##   focusCellHighlightBorder     indicates the border margins. Four int values splitted by commas are required. The order is top;left;bottom;right (by default 2;5;2;5))
Table.focusCellHighlightBorder=

##   intercellSpacing    indicates the inter cell dimension. Two positive integer value is required splitted by; are required (by default 0;0)
Table.intercellSpacing=

##   textBackground    indicates the text foreground color depending on Status. 
Table[Enabled+Selected].textForeground=

##   textBackground    indicates the text Background color depending on Status. 
Table[Disabled+Selected].textBackground=
Table[Enabled+Selected].textBackground=


############## TABLE: Table.cellRenderer:
Table:\"Table.cellRenderer\".contentMargins=
Table:\"Table.cellRenderer\".opaque=
Table:\"Table.cellRenderer\".background=



#############################################   TABLEHEADER    ############################################################
# // TODO: (BLOCKING) la tabla y table header son machacados por Ontimize (tipo de fuente, color, tamaño, background, insets, .....)

##    font    indicates the font for that component. A three-elements short list value with fontName-fontStyle-fontSize is required (By default, SansSerif-PLAIN-12). 
TableHeader.font=Calibri-BOLD-30

##   contentMargins     indicates the TableHeader margins, that is, margins arround the whole component. Four int values splitted by commas are required. The order is top;left;bottom;right (by default 0;0;0;0))
TableHeader.contentMargins=30;30;30;30

##   opaque     indicates whether a TableHeader is opaque, that is, when the colours/painters under it will be visible or not (transparent or opaque). A boolean true/false is required (by default, true)
TableHeader.opaque=false

##   disabledText        indicates the text color for the TableHeader  when disabled. A RGB or Hexadecimal value is required (allowing alpha indication as forth value in the RGb (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). By default: 0;0;0 
TableHeader.disabledText=255;255;0

##   foreground        indicates the text color for the TableHeader.  A RGB or Hexadecimal value is required (allowing alpha indication as forth value in the RGb (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). By default: 0;0;0 
TableHeader.foreground=255;255;255

##   disabled        the background color of the TableHeaders when disabled. A color in RGB or hexadecimal is required. By default: 214;217;223
TableHeader.disabled=0;0;255

##   background        the background color of the TableHeaders. A color in RGB or hexadecimal is required. By default: 214;217;223
TableHeader.background=0;0;0

TableHeader.ancestorInputMap=

##   rightAlignSortArrow     indicates right align. A boolean true/false is required (by default, true)
TableHeader.rightAlignSortArrow=

#HACEEEEEEEEEEEEEEEEEEER
# TODO: PARECE QUE ONTIMIZE MACHACA TODO
#        ctx =  new com.ontimize.plaf.tools.AbstractRegionPainter.PaintContext(new Insets(0, 0, 0, 2), new Dimension(7, 7), false, AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES, 1.0, 1.0);
#        OntimizeLAFUtils.putProperty("TableHeader[Enabled].ascendingSortIconPainter", new LazyPainter("com.ontimize.plaf.painter.OTableHeaderPainter", OTableHeaderPainter.ASCENDINGSORTICON_ENABLED, ctx));
#        ctx =  new com.ontimize.plaf.tools.AbstractRegionPainter.PaintContext(new Insets(0, 0, 0, 0), new Dimension(7, 7), false, AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES, 1.0, 1.0);
#        OntimizeLAFUtils.putProperty("TableHeader[Enabled].descendingSortIconPainter", new LazyPainter("com.ontimize.plaf.painter.OTableHeaderPainter", OTableHeaderPainter.DESCENDINGSORTICON_ENABLED, ctx));



############## TABLEHEADER: RENDERER:
##   contentMargins     indicates the TableHeader renderer margins, that is, margins arround the whole component. Four int values splitted by commas are required. The order is top;left;bottom;right (by default 2;2;2;2))
TableHeader:\"TableHeader.renderer\".contentMargins=

##   opaque     indicates whether a TableHeader renderer is opaque, that is, when the colours/painters under it will be visible or not (transparent or opaque). A boolean true/false is required (by default, true)
TableHeader:\"TableHeader.renderer\".opaque=



# TODO: PARECE QUE ONTIMIZE MACHACA TODO
#		ctx =  new com.ontimize.plaf.tools.AbstractRegionPainter.PaintContext(new Insets(5, 5, 5, 5), new Dimension(22, 20), false, AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
#		OntimizeLAFUtils.putProperty("TableHeader:\"TableHeader.renderer\"[Disabled].backgroundPainter", new LazyPainter("com.ontimize.plaf.painter.OTableHeaderRendererPainter", OTableHeaderRendererPainter.BACKGROUND_DISABLED, ctx));
#		OntimizeLAFUtils.putProperty("TableHeader:\"TableHeader.renderer\"[Enabled].backgroundPainter", new LazyPainter("com.ontimize.plaf.painter.OTableHeaderRendererPainter", OTableHeaderRendererPainter.BACKGROUND_ENABLED, ctx));
#		OntimizeLAFUtils.putProperty("TableHeader:\"TableHeader.renderer\"[Enabled+Focused].backgroundPainter", new LazyPainter("com.ontimize.plaf.painter.OTableHeaderRendererPainter", OTableHeaderRendererPainter.BACKGROUND_ENABLED_FOCUSED, ctx));
#		OntimizeLAFUtils.putProperty("TableHeader:\"TableHeader.renderer\"[MouseOver].backgroundPainter", new LazyPainter("com.ontimize.plaf.painter.OTableHeaderRendererPainter", OTableHeaderRendererPainter.BACKGROUND_MOUSEOVER, ctx));
#		OntimizeLAFUtils.putProperty("TableHeader:\"TableHeader.renderer\"[Pressed].backgroundPainter", new LazyPainter("com.ontimize.plaf.painter.OTableHeaderRendererPainter", OTableHeaderRendererPainter.BACKGROUND_PRESSED, ctx));
#		OntimizeLAFUtils.putProperty("TableHeader:\"TableHeader.renderer\"[Enabled+Sorted].backgroundPainter", new LazyPainter("com.ontimize.plaf.painter.OTableHeaderRendererPainter", OTableHeaderRendererPainter.BACKGROUND_ENABLED_SORTED, ctx));
#		OntimizeLAFUtils.putProperty("TableHeader:\"TableHeader.renderer\"[Enabled+Focused+Sorted].backgroundPainter", new LazyPainter("com.ontimize.plaf.painter.OTableHeaderRendererPainter", OTableHeaderRendererPainter.BACKGROUND_ENABLED_FOCUSED_SORTED, ctx));
#		OntimizeLAFUtils.putProperty("TableHeader:\"TableHeader.renderer\"[Disabled+Sorted].backgroundPainter", new LazyPainter("com.ontimize.plaf.painter.OTableHeaderRendererPainter", OTableHeaderRendererPainter.BACKGROUND_DISABLED_SORTED, ctx));


TableHeader\:\"TableHeader.renderer\"[Ascending].backgroundPainter_bgPainter=#80b721
TableHeader\:\"TableHeader.renderer\"[Descending].backgroundPainter_bgPainter=#e64718

Table\:\"Table.QuickFilter\".arcWidth=10
Table\:\"Table.QuickFilter\".arcHeight=10

##     background     indicates the background for that component. A painter is required (gradient, texture or color with or without alpha. See documentation)
Table\:\"Table.QuickFilter\"[Enabled].backgroundPainter_bgPainter=#FFFFFF
Table\:\"Table.QuickFilter\"[Disabled].backgroundPainter_bgPainter=255;255;255;125
Table\:\"Table.QuickFilter\"[Selected].backgroundPainter_bgPainter=#61BEE8

##     degradatedBorderColor     indicates the border color pixel by pixel for that component (Color order is outside-in). ¡USED ONLY WHEN arcWidth>=0 AND arcHeight>=0 !
# Can be set as RGB or Hexadecimal values as degrated colours desired (splitted by ~). Moreover an alpha value can be added as forth value in the RGB
#(that is R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). A single value indicates a single border.
#(Two-colors-Ex: 255;255;255~0;0;0 or with alpha 255;255;255;50~0;0;0;100 or #ffffff~#000000 or #ffffffcc-#000000cc )
Table\:\"Table.QuickFilter\".degradatedBorderColor.Enabled=#E5E5E5
Table\:\"Table.QuickFilter\".degradatedBorderColor.Disabled=#a5b6c0
Table\:\"Table.QuickFilter\".degradatedBorderColor.Focused=97;190;232;255~97;190;232;179~97;190;232;102~97;190;232;25











#######################################################################################################################
#######################################################################################################################
###################################  SPECIFIC ONTIMIZE COMPONENTS    ##################################################
#######################################################################################################################
#######################################################################################################################

# Sometimes it is required to define some Ontimize classes or sub-classes as independient JAVA components, in order to  be able to specify a 
# different layout for those classes. (For instance, the FormTitle is a TextField but in some cases it is required put it a diffent layout. 
# Or rows and columns can be required to be configured not as the other Panels in the application.

# All those components (keys) are included here. (For information, see above the keys meaning, in the component related for each one)

# Rows, Columns, Grids, Form, FormExt ... = PANELS
# (opaque= true=> semitransparent background; opaque= false=> solid background; opaque= nothing => background only indicates the border colors when title not null)
# (It is necessary to have transparent rows, columns and grids, to be able to get an image placed as background in Form and FormExt components)
\"Row\".font=
\"Row\".contentMargins=
\"Row\".opaque=true
\"Row\".background=255;255;255;0
\"Row\".foreground=
\"Row\".disabled=
\"Row\".disabledText=

\"Column\".font=
\"Column\".contentMargins=
\"Column\".opaque=true
\"Column\".background=255;255;255;0
\"Column\".foreground=
\"Column\".disabled=
\"Column\".disabledText=

\"Grid\".font=
\"Grid\".contentMargins=
\"Grid\".opaque=true
\"Grid\".background=255;255;255;0
\"Grid\".foreground=
\"Grid\".disabled=
\"Grid\".disabledText=

\"Form\".font=
\"Form\".contentMargins=
\"Form\".opaque=true
\"Form\"[Enabled].backgroundPainter_bgPainter=
\"Form\".background=
\"Form\".foreground=
\"Form\".disabled=
\"Form\".disabledText=

\"FormExt\".font=
\"FormExt\".contentMargins=
\"FormExt\".opaque=false
\"FormExt\"[Enabled].backgroundPainter_bgPainter=
\"FormExt\".background=
\"FormExt\".foreground=
\"FormExt\".disabled=
\"FormExt\".disabledText=


# FormTitle, ... = TextField
# TODO: The border is overriden by Ontimize (SoftBevelBorder2). So some border params will not be able to be configured until Ontimize was modified.
\"FormTitle\".font=
\"FormTitle\".contentMargins=
\"FormTitle\"[Enabled].textForeground=
\"FormTitle\"[Disabled].textForeground=
\"FormTitle\"[Focused].textForeground=
\"FormTitle\"[Selected].textForeground=
\"FormTitle\".arcWidth=10
\"FormTitle\".arcHeight=10
\"FormTitle\"[Enabled].backgroundPainter_bgPainter=0.0f~0.4999f~0.5f~1.0f¬#f2f2f2~#ebebeb~#dddddd~#cfcfcf
\"FormTitle\"[Disabled].backgroundPainter_bgPainter=0.0f~0.4999f~0.5f~1.0f¬#f2f2f2~#ebebeb~#dddddd~#cfcfcf
\"FormTitle\"[Selected].backgroundPainter_bgPainter=0.0f~0.4999f~0.5f~1.0f¬#f2f2f2~#ebebeb~#dddddd~#cfcfcf
\"FormTitle\".degradatedBorderColor.Enabled=
\"FormTitle\".degradatedBorderColor.Disabled=
\"FormTitle\".degradatedBorderColor.Focused=
\"FormTitle\"[Enabled].borderPainter_topLine=
\"FormTitle\"[Enabled].borderPainter_secondaryTopLine=
\"FormTitle\"[Enabled].borderPainter_leftLine=
\"FormTitle\"[Enabled].borderPainter_rightLine=
\"FormTitle\"[Enabled].borderPainter_bottomLine=
\"FormTitle\"[Disabled].borderPainter_topLine=
\"FormTitle\"[Disabled].borderPainter_secondaryTopLine=
\"FormTitle\"[Disabled].borderPainter_leftLine=
\"FormTitle\"[Disabled].borderPainter_rightLine=
\"FormTitle\"[Disabled].borderPainter_bottomLine=
\"FormTitle\"[Focused].borderPainter_topLine=
\"FormTitle\"[Focused].borderPainter_secondaryTopLine=
\"FormTitle\"[Focused].borderPainter_leftLine=
\"FormTitle\"[Focused].borderPainter_rightLine=
\"FormTitle\"[Focused].borderPainter_bottomLine=
\"FormTitle\"[Focused].borderPainter_focusBorder=

\"FormTitle\".background=
\"FormTitle\".foreground=
\"FormTitle\".disabled=
\"FormTitle\".disabledText=




# MenuButtonSelection, FormHeaderButton, QueryFilterButton .... = BUTTON
\"MenuButtonSelection\".font=
\"MenuButtonSelection\".contentMargins=
\"MenuButtonSelection\".disabled=
\"MenuButtonSelection\".background=
\"MenuButtonSelection\".disabledText=
\"MenuButtonSelection\".foreground=
\"MenuButtonSelection\"[Disabled].textForeground=
\"MenuButtonSelection\"[Default+Pressed].textForeground=
\"MenuButtonSelection\".focusInputMap=
\"MenuButtonSelection\".defaultButtonFollowsFocus=
\"MenuButtonSelection\"[Default].backgroundPainter_border=
\"MenuButtonSelection\"[Default].backgroundPainter_bgPainter=
\"MenuButtonSelection\"[Default+Focused].backgroundPainter_border=
\"MenuButtonSelection\"[Default+Focused].backgroundPainter_bgPainter=
\"MenuButtonSelection\"[Default+MouseOver].backgroundPainter_border=
\"MenuButtonSelection\"[Default+MouseOver].backgroundPainter_bgPainter=
\"MenuButtonSelection\"[Default+Focused+MouseOver].backgroundPainter_border=
\"MenuButtonSelection\"[Default+Focused+MouseOver].backgroundPainter_bgPainter=
\"MenuButtonSelection\"[Default+Pressed].backgroundPainter_border=
\"MenuButtonSelection\"[Default+Pressed].backgroundPainter_bgPainter=
\"MenuButtonSelection\"[Default+Focused+Pressed].backgroundPainter_border=
\"MenuButtonSelection\"[Default+Focused+Pressed].backgroundPainter_bgPainter=
\"MenuButtonSelection\"[Disabled].backgroundPainter_border=
\"MenuButtonSelection\"[Disabled].backgroundPainter_bgPainter=
\"MenuButtonSelection\"[Enabled].backgroundPainter_border=
\"MenuButtonSelection\"[Enabled].backgroundPainter_bgPainter=
\"MenuButtonSelection\"[Focused].backgroundPainter_border=
\"MenuButtonSelection\"[Focused].backgroundPainter_bgPainter=
\"MenuButtonSelection\"[MouseOver].backgroundPainter_border=
\"MenuButtonSelection\"[MouseOver].backgroundPainter_bgPainter=
\"MenuButtonSelection\"[Focused+MouseOver].backgroundPainter_border=
\"MenuButtonSelection\"[Focused+MouseOver].backgroundPainter_bgPainter=
\"MenuButtonSelection\"[Pressed].backgroundPainter_border=
\"MenuButtonSelection\"[Pressed].backgroundPainter_bgPainter=
\"MenuButtonSelection\"[Focused+Pressed].backgroundPainter_border=
\"MenuButtonSelection\"[Focused+Pressed].backgroundPainter_bgPainter=

\"FormHeaderButton\".font=
\"FormHeaderButton\".contentMargins=
\"FormHeaderButton\".disabled=
\"FormHeaderButton\".background=
\"FormHeaderButton\".disabledText=
\"FormHeaderButton\".foreground=
\"FormHeaderButton\"[Disabled].textForeground=
\"FormHeaderButton\"[Default+Pressed].textForeground=
\"FormHeaderButton\".focusInputMap=
\"FormHeaderButton\".defaultButtonFollowsFocus=
\"FormHeaderButton\"[Default].backgroundPainter_border=
\"FormHeaderButton\"[Default].backgroundPainter_bgPainter=
\"FormHeaderButton\"[Default+Focused].backgroundPainter_border=
\"FormHeaderButton\"[Default+Focused].backgroundPainter_bgPainter=
\"FormHeaderButton\"[Default+MouseOver].backgroundPainter_border=
\"FormHeaderButton\"[Default+MouseOver].backgroundPainter_bgPainter=
\"FormHeaderButton\"[Default+Focused+MouseOver].backgroundPainter_border=
\"FormHeaderButton\"[Default+Focused+MouseOver].backgroundPainter_bgPainter=
\"FormHeaderButton\"[Default+Pressed].backgroundPainter_border=
\"FormHeaderButton\"[Default+Pressed].backgroundPainter_bgPainter=
\"FormHeaderButton\"[Default+Focused+Pressed].backgroundPainter_border=
\"FormHeaderButton\"[Default+Focused+Pressed].backgroundPainter_bgPainter=
\"FormHeaderButton\"[Disabled].backgroundPainter_border=
\"FormHeaderButton\"[Disabled].backgroundPainter_bgPainter=
\"FormHeaderButton\"[Enabled].backgroundPainter_border=
\"FormHeaderButton\"[Enabled].backgroundPainter_bgPainter=
\"FormHeaderButton\"[Focused].backgroundPainter_border=
\"FormHeaderButton\"[Focused].backgroundPainter_bgPainter=
\"FormHeaderButton\"[MouseOver].backgroundPainter_border=
\"FormHeaderButton\"[MouseOver].backgroundPainter_bgPainter=
\"FormHeaderButton\"[Focused+MouseOver].backgroundPainter_border=
\"FormHeaderButton\"[Focused+MouseOver].backgroundPainter_bgPainter=
\"FormHeaderButton\"[Pressed].backgroundPainter_border=
\"FormHeaderButton\"[Pressed].backgroundPainter_bgPainter=
\"FormHeaderButton\"[Focused+Pressed].backgroundPainter_border=
\"FormHeaderButton\"[Focused+Pressed].backgroundPainter_bgPainter=

\"QueryFilterButton\".font=
\"QueryFilterButton\".contentMargins=
\"QueryFilterButton\".disabled=
\"QueryFilterButton\".background=
\"QueryFilterButton\".disabledText=
\"QueryFilterButton\".foreground=
\"QueryFilterButton\"[Disabled].textForeground=
\"QueryFilterButton\"[Default+Pressed].textForeground=
\"QueryFilterButton\".focusInputMap=
\"QueryFilterButton\".defaultButtonFollowsFocus=
\"QueryFilterButton\"[Default].backgroundPainter_border=
\"QueryFilterButton\"[Default].backgroundPainter_bgPainter=
\"QueryFilterButton\"[Default+Focused].backgroundPainter_border=
\"QueryFilterButton\"[Default+Focused].backgroundPainter_bgPainter=
\"QueryFilterButton\"[Default+MouseOver].backgroundPainter_border=
\"QueryFilterButton\"[Default+MouseOver].backgroundPainter_bgPainter=
\"QueryFilterButton\"[Default+Focused+MouseOver].backgroundPainter_border=
\"QueryFilterButton\"[Default+Focused+MouseOver].backgroundPainter_bgPainter=
\"QueryFilterButton\"[Default+Pressed].backgroundPainter_border=
\"QueryFilterButton\"[Default+Pressed].backgroundPainter_bgPainter=
\"QueryFilterButton\"[Default+Focused+Pressed].backgroundPainter_border=
\"QueryFilterButton\"[Default+Focused+Pressed].backgroundPainter_bgPainter=
\"QueryFilterButton\"[Disabled].backgroundPainter_border=
\"QueryFilterButton\"[Disabled].backgroundPainter_bgPainter=
\"QueryFilterButton\"[Enabled].backgroundPainter_border=
\"QueryFilterButton\"[Enabled].backgroundPainter_bgPainter=
\"QueryFilterButton\"[Focused].backgroundPainter_border=
\"QueryFilterButton\"[Focused].backgroundPainter_bgPainter=
\"QueryFilterButton\"[MouseOver].backgroundPainter_border=
\"QueryFilterButton\"[MouseOver].backgroundPainter_bgPainter=
\"QueryFilterButton\"[Focused+MouseOver].backgroundPainter_border=
\"QueryFilterButton\"[Focused+MouseOver].backgroundPainter_bgPainter=
\"QueryFilterButton\"[Pressed].backgroundPainter_border=
\"QueryFilterButton\"[Pressed].backgroundPainter_bgPainter=
\"QueryFilterButton\"[Focused+Pressed].backgroundPainter_border=
\"QueryFilterButton\"[Focused+Pressed].backgroundPainter_bgPainter=
