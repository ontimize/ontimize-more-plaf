
##########################################  GENERIC COLORS  ########################################################
# These properties allow users to change the colors of the whole Look And Feel, that is, for all the components. However, more specific properties (which override
# these global properties) can be set by filling the components properties (that is, the properties indicated below for each component: TEXTFIELD, TREE, ...)
# For instance: the variable text allows users to set the color of the whole application texts. However, another different text color can be indicated for the tree
# using the property Tree.textForeground.

# All these values are Colours, so, these values can be set as RGB or Hexadecimal values. Moreover an alpha value 
# can be added as forth value in the RGB (that is R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). A single value indicates a single border.
#(Two-colors-Ex: 255;255;255~0;0;0 or with alpha 255;255;255;50~0;0;0;100 or #ffffff~#000000 or #ffffffcc-#000000cc )

text=
nimbusSelectionBackground=
nimbusSelectedText=
nimbusDisabledText=
nimbusLightBackground=
control=
info=
nimbusInfoBlue=
nimbusAlertYellow=
nimbusBase=
nimbusFocus=
nimbusGreen=
nimbusRed=
nimbusOrange=

activeCaption=
background=
controlDkShadow=
controlHighlight=
controlLHighlight=
controlShadow=
controlText=
desktop =
inactiveCaption=
infoText=
menu=
menuText=
nimbusBlueGrey=
nimbusBorder=
nimbusSelection=
scrollbar=
textBackground=
textForeground=
textHighlight=
textHighlightText=
textInactiveText=








############################################# TEXTFIELD ############################################################
# TEXTFIELD (It is included in most of the Ontimize Data Fields among other components such as, the form title, 
# the page number (in a pageable table), the quickfilter, ...):


##     contentMargins     indicates the component margins. Four int values splitted by commas are required. The order is top;left;bottom;right 
TextField.contentMargins=
#
##     font indicates     the font for that component. A three-elements short list value with fontName-fontStyle-fontSize is required (Ex: Calibri-PLAIN-12). 
TextField.font=
#
##     textForeground     indicates the font Color for that component. A RGB or Hexadecimal value is required. 
TextField[Enabled].textForeground=
TextField[Disabled].textForeground=
TextField[Focused].textForeground=
TextField[Selected].textForeground=
#
##     arcWidth and arcHeight     indicates the component corner arc. An int value is required. 
TextField.arcWidth=
TextField.arcHeight=

##     background     indicates the background for that component. A painter is required (gradient, texture or color with or without alpha. See documentation)
TextField[Enabled].backgroundPainter_bgPainter=
TextField[Disabled].backgroundPainter_bgPainter=
TextField[Selected].backgroundPainter_bgPainter=

##     degradatedBorderColor     indicates the border color pixel by pixel for that component (Color order is outside-in). ¡USED ONLY WHEN arcWidth>=0 AND arcHeight>=0 !
# Can be set as RGB or Hexadecimal values as degrated colours desired (splitted by ~). Moreover an alpha value can be added as forth value in the RGB
#(that is R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). A single value indicates a single border.
#(Two-colors-Ex: 255;255;255~0;0;0 or with alpha 255;255;255;50~0;0;0;100 or #ffffff~#000000 or #ffffffcc-#000000cc )
TextField.degradatedBorderColor.Enabled=
TextField.degradatedBorderColor.Disabled=
TextField.degradatedBorderColor.Focused=

##     border painter     indicates the border for that component. ¡USED ONLY WHEN arcWidth<0 AND arcHeight<0!. A painter is required (gradient, texture or color with or without alpha. See documentation) 
TextField[Enabled].borderPainter_topLine=
TextField[Enabled].borderPainter_secondaryTopLine=
TextField[Enabled].borderPainter_leftLine=
TextField[Enabled].borderPainter_rightLine=
TextField[Enabled].borderPainter_bottomLine=
TextField[Disabled].borderPainter_topLine=
TextField[Disabled].borderPainter_secondaryTopLine=
TextField[Disabled].borderPainter_leftLine=
TextField[Disabled].borderPainter_rightLine=
TextField[Disabled].borderPainter_bottomLine=
TextField[Focused].borderPainter_topLine=
TextField[Focused].borderPainter_secondaryTopLine=
TextField[Focused].borderPainter_leftLine=
TextField[Focused].borderPainter_rightLine=
TextField[Focused].borderPainter_bottomLine=
TextField[Focused].borderPainter_focusBorder=






#############################################   TREE    ############################################################
# TREE (These properties allow users to configure the Jtrees layout and colors. Jtrees are included in the Ontimize Trees among other Ontimize components
# such as, the left panels on the Ontimize Gannt or Ontimize DMS

#    font    indicates the font for that component. A three-elements short list value with fontName-fontStyle-fontSize is required (Ex: Calibri-PLAIN-12). 
Tree.font=

#     rendererFillBackground  indicates when the renderer fill the background (true) or not (false). That is, the space arround the text in the back side. 
# If this property is true, that space will be painted using the the properties: textBackground, selectionBackground. If false, those properties are not used.
Tree.rendererFillBackground=

#    closedIcon         set the node icon when the node is closed (by default, a closed folder). A string, which indicates a path to a 16x16 icon, is required. (F.ex: com/ontimize/plaf/images/closeIcon.png)
Tree.closedIcon=
#    openIcon           set the node icon when the node is open (by default, an opened folder). A string, which indicates a path to a 16x16 icon, is required.
Tree.openIcon=
#    leafIcon           set the node icon when the node is a leaf (by default, a blatt). A string, which indicates a path to a 16x16 icon, is required.
Tree.leafIcon=
#    collapsedIcon      set the icon that indicates when the node is collapsed (by default, a horizontal arrow of 18x7). If the node has an image icon, the collapsed icon is placed on its left.
Tree.collapsedIcon=
#    expandedIcon       set the icon that indicates when the node is expanded (by default, a horizontal arrow of 7x18). If the node has an image icon, the collapsed icon is placed on its left.
Tree.expandedIcon=

##   contentMargins     indicates the tree margins, that is, margins arround the whole tree. Four int values splitted by commas are required. The order is top;left;bottom;right (by default 0;0;0;0)
Tree.contentMargins=

#    rowHeight          set the height for each row. A positive integer is required (by default, 0)
Tree.rowHeight=

#    rightChildIndent   set the node indentation (to the right). A positive integer is required (by default, 4)
Tree.rightChildIndent=



#    textForeground      indicates the foreground of each node (that is, the text color) for one-level-trees
Tree.textForeground=
#    Tree:TreeCell.textForeground      indicates the foreground of each node (=tree cell) for multiple-level-trees. It has also status.
Tree\:TreeCell[Focused].textForeground=
Tree\:TreeCell[Selected].textForeground=
Tree\:TreeCell[Enabled].textForeground=
Tree\:TreeCell[Disabled].textForeground=

#    selectionForeground      indicates the foreground of each node (that is, the text color) when selected (for both, one or multiple level-trees).  A RGB or Hexadecimal value is required (allowing alpha indication as forth value in the RGB
# (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). 
Tree.selectionForeground=

#    selectionBackground      indicates the background of each node when selected (that is, the area around the text) only if the rendererFillBackground has the value true.
#  A RGB or Hexadecimal value is required (allowing alpha indication as forth value in the RGB (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). 
Tree.selectionBackground=

#    textBackground      indicates the background of each node (that is, the area around the text) only if the rendererFillBackground has the value true.  A RGB 
# or Hexadecimal value is required (allowing alpha indication as forth value in the RGB (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). 
Tree.textBackground=

#    background      indicates the background of the whole tree.  A RGB or Hexadecimal value is required (allowing alpha indication as forth value in the RGB
# (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). 
Tree.background=

##   TODO: to be validated: (Included for Nimbus compatibility)
Tree\:TreeCell[Enabled].background=
Tree\:TreeCell[Focused].background=
Tree\:TreeCell[Enabled+Focused].background=

Tree\:TreeCell[Focused+Selected].backgroundPainter_borderPainter=
Tree\:TreeCell[Focused+Selected].backgroundPainter_bgPainter=
Tree\:TreeCell[Enabled+Focused].backgroundPainter_borderPainter=
Tree\:TreeCell[Enabled+Focused].backgroundPainter_bgPainter=
Tree\:TreeCell[Enabled+Selected].backgroundPainter_borderPainter=
Tree\:TreeCell[Enabled+Selected].backgroundPainter_bgPainter=

############## TREE: CELLEDITOR:

##   contentMargins     indicates the TabbedPane margins, that is, margins arround the whole component. Four int values splitted by commas are required. The order is top;left;bottom;right (by default 2;5;2;5)
\"Tree.cellEditor\".contentMargins=

##   opaque     indicates whether a panel is opaque, that is, when the colours/painters under it will be visible or not (transparent or opaque). A boolean true/false is required (by default, true)
"\"Tree.cellEditor\".opaque=

\"Tree.cellEditor\".background=
\"Tree.cellEditor\"[Disabled].textForeground=
\"Tree.cellEditor\"[Enabled].backgroundPainter=
\"Tree.cellEditor\"[Selected].textForeground=
\"Tree.cellEditor\"[Enabled+Focused].backgroundPainter=











#############################################   TABBEDPANE    ############################################################

##    font    indicates the font for that component. A three-elements short list value with fontName-fontStyle-fontSize is required (Ex: Calibri-PLAIN-12). 
TabbedPane.font=

##   contentMargins     indicates the TabbedPane margins, that is, margins arround the whole component. Four int values splitted by commas are required. The order is top;left;bottom;right (by default 0;0;0;0)
TabbedPane.contentMargins=
##   TabbedPaneContent.contentMargins     indicates the margins in the tab content, that is, the margins arround the elements embedded in the tab. Four int values splitted by commas are required. The order is top;left;bottom;right (by default 0;0;0;0)
TabbedPane\:TabbedPaneContent.contentMargins=
##   TabbedPaneTab.contentMargins     indicates the margins in the tab header, that is, margins arround the tab title. Four int values splitted by commas are required. The order is top;left;bottom;right (by default 0;0;0;0)
TabbedPane\:TabbedPaneTab.contentMargins=
##   TabbedPaneTabArea.contentMargins     indicates the margins arround the tab headers. Four int values splitted by commas are required. The order is top;left;bottom;right (by default 0;0;0;0)
TabbedPane\:TabbedPaneTabArea.contentMargins=

##   foreground        indicates the text color for the tab headers (depending on tab status).  A RGB or Hexadecimal value is required (allowing alpha indication as forth value in the RGB
# (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). 
TabbedPane.foreground=
TabbedPane\:TabbedPaneTab[Enabled].textForeground=
TabbedPane\:TabbedPaneTab[Disabled].textForeground=
TabbedPane\:TabbedPaneTab[Selected].textForeground=
TabbedPane\:TabbedPaneTab[Focused].textForeground=


##    tabOverlap         indicates the number of pixels that each tap is over its nearby tabs. A negative int value is required (by default -1)
#If non-zero, tabOverlap indicates the amount that the tab bounds should be altered such that they would overlap with a tab on either the leading or trailing end 
#of a run (ie: in TOP, this would be on the left or right)l. A positive overlap indicates that tabs should overlap right/down, while a negative overlap indicates 
#tha tabs should overlap left/up. When tabOverlap is specified, it both changes the x position and width of the tab if in TOP or BOTTOM placement, and changes the
#y position and height if in LEFT or RIGHT placement.
#This is done for the following reason. Consider a run of 10 tabs. There are 9 gaps between these tabs. If you specified a tabOverlap of "-1", then each of the 
#tabs "x" values will be shifted left. This leaves 9 pixels of space to the right of the right-most tab unpainted. So, each tab's width is also extended by 1 pixel to make up the difference.
TabbedPane.tabOverlap=

#     extendTabsToBase      When a tabbed pane has multiple rows of tabs, this indicates whether the tabs in the upper row(s) should extend to the base of the tab
# area, or whether they should remain at their normal tab height. This does not affect the bounds of the tabs, only the bounds of area painted by the tabs.
# The text position does not change. The result is that the bottom border of the upper row of tabs becomes fully obscured by the lower tabs, resulting in a cleaner look.
# A boolean value is required (by default, false)
TabbedPane.extendTabsToBase=

#   tabAreaStatesMatchSelectedTab     indicates where the tab area is painted differently depending on the state for the selected tab. A boolean value is required (by default, true)
TabbedPane.tabAreaStatesMatchSelectedTab=

#   tabAreaStatesMatchSelectedTab     ensures that the labels don't move whether the tab is selected or not. A boolean value is required (by default, false)
TabbedPane.nudgeSelectedLabel=

#   useBasicArrows          to use the basic arrow buttons UIManager is queried directly. A boolean value is required (by default, true)
TabbedPane.useBasicArrows=



#HOW TO DEFINE A PAINTER:
#A) BASED ON GRADIENT: Fill following configuration properties concated by ¬.
#   		float[] fractions (splitted by ~) ¬ Color[] Color (splitted by ~ and valid with alpha) ¬ CycleMethod NO_CYCLE, REFLECT o REPEAT (optional) ¬ Direction for the degradate (optional) ¬ Points (optional)
#1.- FRACTIONS: They indicates the percentage of the area which is filled by each color. Float numbers (in the range 0 to 1) splitted by ~ are required. For instance: 0.0f~0.5f~1.0f
#2.- COLOURS: They indicate the colors to fill the areas between fractions. Colors in hexadecimal or R;G;B (with our without alpha) splitted by ~ are required. For instance: 158;191;230;50~111;161;217;50~99;132;169;50
#3.- CycleMethod: Has one of the next values:  By default, CycleMethod.NO_CYCLE.
#        NO_CYCLE: Use the terminal colors to fill the remaining area.
#        REFLECT: Cycle the gradient colors start-to-end, end-to-start to fill the remaining area.
#        REPEAT: Cycle the gradient colors start-to-end, start-to-end to fill the remaining area.
#4.- DIRECTION: Indicates the direction in which run the parallel bands of color that determines the gradient:  By default, HORIZONTAL_DEGRADATED.
#        HORIZONTAL_DEGRADATED: For horizontal parallel bands (0 degrees).
#        VERTICAL_DEGRADATED: For vertical parallel bands (90 degrees).
#        ASCENT_TRANSVERSAL_DEGRADATED: For transversal parallel bands in ascent way (45 degrees).
#        DESCENT_TRANSVERSAL_DEGRADATED: For transversal parallel bands in descent way (135 degrees).
#5.- POINTS: They indicate the x start point, y start point, width and heigt. Float numbers splitted by ~. Optional. If they are not indicated the L&F fill them.
#    
#B) BASED ON IMAGE OR TEXTURE: Additionally, an image or texture can be set, instead of the colours and fractions. For that fact, users must indicate only the path to get it, instead of the previous syntax. 
#    For ex: com/ontimize/plaf/images/miTextura.JPG (valid formats: .jpeg .jpg .JPEG JPG .png .PNG )
#
#C) BASED ON COLOR: This is a simplification of case A), in which ONLY a Color is indicated (in rgb or hexadecimal with or without alpha)

# To configure the border and background of each tab. A painter is required (gradient or texture)
TabbedPane\:TabbedPaneTab[Enabled].backgroundPainter_BorderPainter=
TabbedPane\:TabbedPaneTab[Enabled].backgroundPainter_BgPainter=0.0f~0.5f~1.0f¬255;0;0~0;255;0~0;0;255
TabbedPane\:TabbedPaneTab[Enabled+MouseOver].backgroundPainter_BorderPainter=
TabbedPane\:TabbedPaneTab[Enabled+MouseOver].backgroundPainter_BgPainter=com/ontimize/plaf/images/miTextura.png
TabbedPane\:TabbedPaneTab[Enabled+Pressed].backgroundPainter_BorderPainter=
TabbedPane\:TabbedPaneTab[Enabled+Pressed].backgroundPainter_BgPainter=
TabbedPane\:TabbedPaneTab[Disabled].backgroundPainter_BorderPainter=
TabbedPane\:TabbedPaneTab[Disabled].backgroundPainter_BgPainter=
TabbedPane\:TabbedPaneTab[Disabled+Selected].backgroundPainter_BorderPainter=
TabbedPane\:TabbedPaneTab[Disabled+Selected].backgroundPainter_BgPainter=
TabbedPane\:TabbedPaneTab[Selected].backgroundPainter_BorderPainter=
TabbedPane\:TabbedPaneTab[Selected].backgroundPainter_BgPainter=com/ontimize/plaf/images/miTextura.JPG
TabbedPane\:TabbedPaneTab[MouseOver+Selected].backgroundPainter_BorderPainter=
TabbedPane\:TabbedPaneTab[MouseOver+Selected].backgroundPainter_BgPainter=
TabbedPane\:TabbedPaneTab[Pressed+Selected].backgroundPainter_BorderPainter=
TabbedPane\:TabbedPaneTab[Pressed+Selected].backgroundPainter_BgPainter=
TabbedPane\:TabbedPaneTab[Focused+Selected].backgroundPainter_BorderPainter=
TabbedPane\:TabbedPaneTab[Focused+Selected].backgroundPainter_BgPainter=
TabbedPane\:TabbedPaneTab[Focused+MouseOver+Selected].backgroundPainter_BorderPainter=
TabbedPane\:TabbedPaneTab[Focused+MouseOver+Selected].backgroundPainter_BgPainter=
TabbedPane\:TabbedPaneTab[Focused+Pressed+Selected].backgroundPainter_BorderPainter=
TabbedPane\:TabbedPaneTab[Focused+Pressed+Selected].backgroundPainter_BgPainter=
#  backgroundPainter_FocusedColor       to configure the selected colour for each tab (rectangle around the tab). 
TabbedPane\:TabbedPaneTab.backgroundPainter_FocusedColor=


# To configure the border and background of each tab area. A painter is required (gradient or texture)
TabbedPane\:TabbedPaneTabArea[Enabled].backgroundPainter_BgPainter=
TabbedPane\:TabbedPaneTabArea[Enabled+MouseOver].backgroundPainter_BgPainter=
TabbedPane\:TabbedPaneTabArea[Enabled+Pressed].backgroundPainter_BgPainter=
TabbedPane\:TabbedPaneTabArea[Disabled].backgroundPainter_BgPainter=
#     borderColor   To configure the border each tab area. A rgb o hexadecimal color with our without alpha. (This is a simplification from option A) 
TabbedPane\:TabbedPaneTabArea[Enabled].backgroundPainter_borderColor=


# Others to set and study when time:
TabbedPane.background=
TabbedPane.darkShadow=
TabbedPane.disabled=
TabbedPane.disabledText=
TabbedPane.highlight=
TabbedPane.isTabRollover=
TabbedPane.shadow=
TabbedPane.tabRunOverlay=









############################################    MENU BAR      ############################################################

##    font    indicates the font for that component. A three-elements short list value with fontName-fontStyle-fontSize is required (By default, SansSerif-PLAIN-12). 
MenuBar.font=

##   contentMargins     indicates the TabbedPane margins, that is, margins arround the whole component. Four int values splitted by commas are required. The order is top;left;bottom;right (by default Insets (1,12,2,13))
MenuBar.contentMargins=

##   textForeground     text color for menu items. A ColorUIResource is required. (By default, )
MenuBar.foreground=

##   textForeground     text color for menu items when disable. A ColorUIResource is required. (By default, )
MenuBar.disabledText=

##   disabled        the background color of the menu items when disable. A color in RGB or hexadecimal is required.
MenuBar.disabled=
		
##   background        the background color of the menu items. A color in RGB or hexadecimal is required.
MenuBar.background=
MenuBar[Enabled].backgroundPainter=
MenuBar[Enabled].borderPainter_bottomBorder=
MenuBar[Enabled].borderPainter_topBorder=
MenuBar[Enabled].borderPainter_rightBorder=
MenuBar[Enabled].borderPainter_leftBorder=

MenuBar.windowBindings=


############## MENU BAR: MENU:
MenuBar:Menu.contentMargins=
MenuBar:Menu:MenuItemAccelerator.contentMargins=
MenuBar:Menu[Enabled].textForeground=
MenuBar:Menu[Disabled].textForeground=
MenuBar:Menu[Selected].textForeground=
MenuBar:Menu[Selected].backgroundPainter=






#############################################   MENU    ############################################################

##    font    indicates the font for that component. A three-elements short list value with fontName-fontStyle-fontSize is required (By default, SansSerif-PLAIN-12). 
Menu.font=

##   contentMargins     indicates the TabbedPane margins, that is, margins arround the whole component. Four int values splitted by commas are required. The order is top;left;bottom;right (by default 1;12;2;5))
Menu.contentMargins=

##   arrowIcon         icon which indicated more item menus which can be expanded. A string, which indicates a path to a icon, is required. (By default, 9 x 10 icon) (F.ex: com/ontimize/plaf/images/closeIcon.png)
Menu.arrowIcon=


##   textForeground    Menu text color. A color in RGB or hexadecimal with or without alpha is required. (By default, 
Menu[Enabled].textForeground=  
Menu[Disabled].textForeground=  

##   background        Menu background color. A color in RGB or hexadecimal with or without alpha is required. (By default, 
Menu.background=

##   backgroundColor   Menu background color when the menu is enable and selected. A color in RGB or hexadecimal with or without alpha is required. (By default, 
Menu[Enabled+Selected].backgroundPainter=
##   iconColor         Menu icon colors. A color in RGB or hexadecimal with or without alpha is required. (By default, 
Menu[Disabled].arrowIconPainter=
Menu[Enabled].arrowIconPainter=
Menu[Enabled+Selected].arrowIconPainter=

##   TODO: to be validated:
Menu.disabledText=
Menu.foreground=
Menu[Enabled+Selected].textForeground=
Menu\:MenuItemAccelerator[MouseOver].textForeground=
Menu\:MenuItemAccelerator.contentMargins=
Menu.disabled=


#############################################   MENUITEM    ############################################################

##    font    indicates the font for that component. A three-elements short list value with fontName-fontStyle-fontSize is required (By default, SansSerif-PLAIN-12). 
MenuItem.font=

##   contentMargins     indicates the TabbedPane margins, that is, margins arround the whole component. Four int values splitted by commas are required. The order is top;left;bottom;right (by default 1;12;2;5))
MenuItem.contentMargins=

##   textIconGap        indicated the space in the menu item. A integer is required. (By default, 5). Take care: menu item width can be defined also by other attributes 
MenuItem.textIconGap=

##   textForeground     text color for menu items. A ColorUIResource is required. (By default, )
MenuItem[Disabled].textForeground=
MenuItem[Enabled].textForeground=
MenuItem[MouseOver].textForeground=
##   textForeground     text color for menu item accelerator (this is, the area where the shortcut is painted). A ColorUIResource is required. (By default, )
MenuItem\:MenuItemAccelerator[Disabled].textForeground=
MenuItem\:MenuItemAccelerator[MouseOver].textForeground=
MenuItem\:MenuItemAccelerator[Enabled].textForeground=
		
##   background        the background color of the menu items. A color in RGB or hexadecimal (without alpha) is required.
MenuItem.background=139;188;195
MenuItem.disabled=

##   mouseoverColor   the background color of the menu items when the mouse is over it. A color in RGB or hexadecimal with or without alpha is required.
MenuItem[MouseOver].backgroundPainter=
MenuItem[Enabled].backgroundPainter=
MenuItem[Disabled].backgroundPainter=

##   TODO: to be validated:
MenuItem.disabledText=
MenuItem.foreground=
MenuItem\:MenuItemAccelerator.contentMargins=




#############################################   RADIO MENU ITEM    ############################################################

##    font    indicates the font for that component. A three-elements short list value with fontName-fontStyle-fontSize is required (By default, SansSerif-PLAIN-12). 
RadioButtonMenuItem.font=

##   contentMargins     indicates the TabbedPane margins, that is, margins arround the whole component. Four int values splitted by commas are required. The order is top;left;bottom;right (by default (1,12,2,13))
RadioButtonMenuItem.contentMargins=

##   textIconGap        indicated the space in the menu item. A integer is required. (By default, 5). Take care: menu item width can be defined also by other attributes 
RadioButtonMenuItem.textIconGap=

##   checkIcon         icon which indicated that a radio item menus is checked. A string, which indicates a path to a icon, is required. (By default, 9 x 10 icon) (F.ex: com/ontimize/plaf/images/closeIcon.png)
RadioButtonMenuItem.checkIcon=

##   textForeground     text color for menu items. A ColorUIResource is required. (By default, )
RadioButtonMenuItem.disabledText=
RadioButtonMenuItem[Disabled].textForeground=
RadioButtonMenuItem[Enabled].textForeground=
RadioButtonMenuItem[MouseOver].textForeground=
RadioButtonMenuItem[MouseOver+Selected].textForeground=
##   textForeground     text color for menu item accelerator (this is, the area where the shortcut is painted). A ColorUIResource is required. (By default, )
RadioButtonMenuItem\:MenuItemAccelerator[Disabled].textForeground=
RadioButtonMenuItem\:MenuItemAccelerator[MouseOver].textForeground=
RadioButtonMenuItem\:MenuItemAccelerator[Enabled].textForeground=
		
##   background        the background color of the menu items. A color in RGB or hexadecimal (without alpha) is required.
RadioButtonMenuItem.background=
RadioButtonMenuItem.disabled=

##   mouseoverColor   the background color of the menu items when the mouse is over it. A color in RGB or hexadecimal with or without alpha is required.
RadioButtonMenuItem[Enabled].backgroundPainter=
RadioButtonMenuItem[Disabled].backgroundPainter=
RadioButtonMenuItem[MouseOver].backgroundPainter=
RadioButtonMenuItem[Selected].backgroundPainter=
RadioButtonMenuItem[MouseOver+Selected].backgroundPainter=

RadioButtonMenuItem[Disabled+Selected].checkIconPainter=
RadioButtonMenuItem[Enabled+Selected].checkIconPainter=
RadioButtonMenuItem[MouseOver+Selected].checkIconPainter=

##   TODO: to be validated:
RadioButtonMenuItem.foreground=
RadioButtonMenuItem\:MenuItemAccelerator.contentMargins=







#############################################   CHECK BOX MENU ITEM    ############################################################

##    font    indicates the font for that component. A three-elements short list value with fontName-fontStyle-fontSize is required (By default, SansSerif-PLAIN-12). 
CheckBoxMenuItem.font=

##   contentMargins     indicates the TabbedPane margins, that is, margins arround the whole component. Four int values splitted by commas are required. The order is top;left;bottom;right (by default Insets (1,12,2,13))
CheckBoxMenuItem.contentMargins=

##   textIconGap        indicated the space in the menu item. A integer is required. (By default, 5). Take care: menu item width can be defined also by other attributes 
CheckBoxMenuItem.textIconGap=

##   checkIcon         icon which indicated that a check box menu item is checked. A string, which indicates a path to a icon, is required. (By default, 9 x 10 icon) (F.ex: com/ontimize/plaf/images/closeIcon.png)
CheckBoxMenuItem.checkIcon=

##   textForeground     text color for menu items. A ColorUIResource is required. (By default, )
CheckBoxMenuItem.disabledText=
CheckBoxMenuItem[Disabled].textForeground=
CheckBoxMenuItem[Enabled].textForeground=
CheckBoxMenuItem[MouseOver].textForeground=
CheckBoxMenuItem[MouseOver+Selected].textForeground=
##   textForeground     text color for menu item accelerator (this is, the area where the shortcut is painted). A ColorUIResource is required. (By default, )
CheckBoxMenuItem\:MenuItemAccelerator[MouseOver].textForeground=
		
##   background        the background color of the menu items. A color in RGB or hexadecimal (without alpha) is required.
CheckBoxMenuItem.background=
CheckBoxMenuItem.disabled=

##   mouseoverColor   the background color of the menu items when the mouse is over it. A color in RGB or hexadecimal with or without alpha is required.
CheckBoxMenuItem[Enabled].backgroundPainter=
CheckBoxMenuItem[Disabled].backgroundPainter=
CheckBoxMenuItem[MouseOver].backgroundPainter=
CheckBoxMenuItem[Selected].backgroundPainter=
CheckBoxMenuItem[MouseOver+Selected].backgroundPainter=

CheckBoxMenuItem[Disabled+Selected].checkIconPainter=
CheckBoxMenuItem[Enabled+Selected].checkIconPainter=
CheckBoxMenuItem[MouseOver+Selected].checkIconPainter=

##   TODO: to be validated:
CheckBoxMenuItem\:MenuItemAccelerator.contentMargins=









#############################################   SCROLL BAR    ############################################################

##    font    indicates the font for that component. A three-elements short list value with fontName-fontStyle-fontSize is required (By default, SansSerif-PLAIN-12). 
ScrollBar.font=

##   contentMargins     indicates the scroll bar margins, that is, margins arround the whole component. Four int values splitted by commas are required. The order is top;left;bottom;right (by default Insets (0,0,0,0))
ScrollBar.contentMargins=

##   decrementButtonGap & incrementButtonGap  indicated the space between the scroll bar arrows and the bar painted in the scroll bar gap. An integer is required, negative to be over the arrow or positive to be separated (By default, -8).
ScrollBar.decrementButtonGap=
ScrollBar.incrementButtonGap=

##   opaque         indicates when the component must be opaque or no. A boolean value is required. WARNING: It is a required value (by default must be true)
ScrollBar.opaque=

##   thumbHeight    indicates the height of the scroll bar. A positive integer value is required (by default 15)
ScrollBar.thumbHeight=

##   thumbHeight    indicates the maximum and minimum thum dimension. Two positive integer value is required splitted by; are required (by default 1000;1000 and 29;29 respectively)
ScrollBar.maximumThumbSize=
ScrollBar.minimumThumbSize=

		
##   background, disabled, foreground, disabledText         colors of the scroll bar. A color in RGB or hexadecimal (with our without alpha) is required.
ScrollBar.background=
ScrollBar.disabled=
ScrollBar.foreground=
ScrollBar.disabledText=



############## SCROLL BAR: BUTTON:
ScrollBar\:ScrollBar.button.contentMargins= 
ScrollBar\:ScrollBar.button.size=


##   arcWidth and arcHeight     indicates the thumb corner arc. An int value is required. A positive value indicates a rounded rect, a zero value indicates a rect, and a negative value indicates the Nimbus scroll bar button shape.
ScrollBar\:\"ScrollBar.button\".arcWidth=
ScrollBar\:\"ScrollBar.button\".arcHeight=
##   borderthickness     indicates the thumb border thickness when arcWidth/Height is >=0. A positive int not bigger than 6 is required.
ScrollBar\:\"ScrollBar.button\".borderthickness=      

ScrollBar\:\"ScrollBar.button\"[Enabled].foregroundPainter=
ScrollBar\:\"ScrollBar.button\"[Enabled].foregroundPainter_outerBorder=
ScrollBar\:\"ScrollBar.button\"[Enabled].foregroundPainter_arrow=
ScrollBar\:\"ScrollBar.button\"[Enabled].foregroundPainter_innerBorder=
ScrollBar\:\"ScrollBar.button\"[Disabled].foregroundPainter=
ScrollBar\:\"ScrollBar.button\"[MouseOver].foregroundPainter=
ScrollBar\:\"ScrollBar.button\"[MouseOver].foregroundPainter_outerBorder=
ScrollBar\:\"ScrollBar.button\"[MouseOver].foregroundPainter_arrow=
ScrollBar\:\"ScrollBar.button\"[MouseOver].foregroundPainter_innerBorder=
ScrollBar\:\"ScrollBar.button\"[Pressed].foregroundPainter=
ScrollBar\:\"ScrollBar.button\"[Pressed].foregroundPainter_outerBorder=
ScrollBar\:\"ScrollBar.button\"[Pressed].foregroundPainter_arrow=
ScrollBar\:\"ScrollBar.button\"[Pressed].foregroundPainter_innerBorder=


############## SCROLL BAR: THUMB:
##   contentMargins     indicates the thumb margins, that is, margins arround the thumb. Four int values splitted by commas are required. The order is top;left;bottom;right (by default Insets (0,0,0,0))
ScrollBar\:ScrollBarThumb.contentMargins=
##   arcWidth and arcHeight     indicates the thumb corner arc. An int value is required. A positive value indicates a rounded rect, a zero value indicates a rect, and a negative value indicates the Nimbus scroll bar thumb shape.
ScrollBar\:ScrollBarThumb.arcWidth=
ScrollBar\:ScrollBarThumb.arcHeight=
##   borderthickness     indicates the thumb border thickness when arcWidth/Height is >=0. A positive int not bigger than 6 is required.
ScrollBar\:ScrollBarThumb.borderthickness=
##   painters           indicates how to paint each area in each status. 
ScrollBar\:ScrollBarThumb[Enabled].backgroundPainter=
ScrollBar\:ScrollBarThumb[Enabled].backgroundPainter_border=
ScrollBar\:ScrollBarThumb[Enabled].backgroundPainter_upperCorner=
ScrollBar\:ScrollBarThumb[Enabled].backgroundPainter_lowerCorner=
ScrollBar\:ScrollBarThumb[MouseOver].backgroundPainter=com/ontimize/plaf/images/miScrollBar.png
ScrollBar\:ScrollBarThumb[MouseOver].backgroundPainter_border=
ScrollBar\:ScrollBarThumb[MouseOver].backgroundPainter_upperCorner=
ScrollBar\:ScrollBarThumb[MouseOver].backgroundPainter_lowerCorner=
ScrollBar\:ScrollBarThumb[Pressed].backgroundPainter=
ScrollBar\:ScrollBarThumb[Pressed].backgroundPainter_border=
ScrollBar\:ScrollBarThumb[Pressed].backgroundPainter_upperCorner=
ScrollBar\:ScrollBarThumb[Pressed].backgroundPainter_lowerCorner=

############## SCROLL BAR: TRACK:
ScrollBar\:ScrollBarTrack.contentMargins=
ScrollBar\:ScrollBarTrack[Disabled].backgroundPainter=
ScrollBar\:ScrollBarTrack[Enabled].backgroundPainter=
ScrollBar\:ScrollBarTrack[Enabled].backgroundPainter_upperCorner=
ScrollBar\:ScrollBarTrack[Enabled].backgroundPainter_lowerCorner=
ScrollBar\:ScrollBarTrack[Enabled].backgroundPainter_upperShadow=
ScrollBar\:ScrollBarTrack[Enabled].backgroundPainter_lowerShadow=


##   properties added to be compatible with Nimbus due to it exist as keys in the Nimbus LAF. However, it has not value in Nimbus.
ScrollBar.ancestorInputMap=
ScrollBar.ancestorInputMap.RightToLeft=





#############################################   PANEL    ############################################################

##    font    indicates the font for that component. A three-elements short list value with fontName-fontStyle-fontSize is required (By default, SansSerif-PLAIN-12). 
Panel.font=

##   contentMargins     indicates the panel margins, that is, margins arround the whole component. Four int values splitted by commas are required. The order is top;left;bottom;right (by default 0;0;0;0)
Panel.contentMargins=

##   opaque     indicates whether a panel is opaque, that is, when the colours/painters under it will be visible or not (transparent or opaque). A boolean true/false is required (by default, true)
Panel.opaque=

##   background        the background color of the panels. A color in RGB or hexadecimal is required. By default: 214;217;223
Panel.background=

##   TODO: to be validated (note: review first Ontimize)
Panel.foreground=
Panel.disabled=
Panel.disabledText=





#############################################   TOOLTIP    ############################################################

##    font    indicates the font for that component. A three-elements short list value with fontName-fontStyle-fontSize is required (By default, SansSerif-PLAIN-12). 
ToolTip.font=

##   contentMargins     indicates the ToolTip margins, that is, margins arround the whole component. Four int values splitted by commas are required. The order is top;left;bottom;right (by default 4;4;4;4))
ToolTip.contentMargins=


ToolTip[Enabled].backgroundPainter_bgPainter=
ToolTip[Enabled].backgroundPainter_rightBorder=
ToolTip[Enabled].backgroundPainter_leftBorder=
ToolTip[Enabled].backgroundPainter_bottomBorder=
ToolTip[Enabled].backgroundPainter_topBorder=


##   TODO: to be validated 
##   foreground        indicates the text color for the ToolTip.  A RGB or Hexadecimal value is required (allowing alpha indication as forth value in the RGb (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). 
ToolTip.foreground=
##   disabledText        indicates the text color for the ToolTip  when disabled. A RGB or Hexadecimal value is required (allowing alpha indication as forth value in the RGb (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). By default: 0;0;0 
ToolTip.disabledText=
##   background        the background color of the ToolTips. A color in RGB or hexadecimal is required. By default: 214;217;223
ToolTip.background=
##   disabled        the background color of the ToolTips when disabled. A color in RGB or hexadecimal is required. By default: 214;217;223
ToolTip.disabled=







#############################################   LABEL    ############################################################

##    font    indicates the font for that component. A three-elements short list value with fontName-fontStyle-fontSize is required (By default, SansSerif-PLAIN-12). 
Label.font=

##   contentMargins     indicates the Label margins, that is, margins arround the whole component. Four int values splitted by commas are required. The order is top;left;bottom;right (by default 0;0;0;0))
Label.contentMargins=

##   disabled        the background color of the Labels when disabled. A color in RGB or hexadecimal is required. By default: 214;217;223
Label.disabled=

##   background        the background color of the Labels. A color in RGB or hexadecimal is required. By default: 214;217;223
Label.background=

##   disabledText        indicates the text color for the Label  when disabled. A RGB or Hexadecimal value is required (allowing alpha indication as forth value in the RGb (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). By default: 142;143;145 
Label.disabledText=

##   foreground        indicates the text color for the Label.  A RGB or Hexadecimal value is required (allowing alpha indication as forth value in the RGb (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). By default: 142;143;145 
Label.foreground=
Label[Disabled].textForeground=








#############################################   TOOLBAR    ############################################################

##    font    indicates the font for that component. A three-elements short list value with fontName-fontStyle-fontSize is required (By default, SansSerif-PLAIN-12). 
ToolBar.font=

##   contentMargins     indicates the toolBar margins, that is, margins arround the whole component. Four int values splitted by commas are required. The order is top;left;bottom;right (by default 2;2;2;2))
ToolBar.contentMargins=

##   opaque     indicates whether a toolBar is opaque, that is, when the colours/painters under it will be visible or not (transparent or opaque). A boolean true/false is required (by default, true)
Panel.opaque=

##   disabledText        indicates the text color for the toolBar  when disabled. A RGB or Hexadecimal value is required (allowing alpha indication as forth value in the RGb (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). By default: 0;0;0 
ToolBar.disabledText=

##   foreground        indicates the text color for the toolBar.  A RGB or Hexadecimal value is required (allowing alpha indication as forth value in the RGb (that is, R;G;B;alpha) or in the Hexadecimal (H'rrggbbxx). By default: 142;143;145 
ToolBar.foreground=

ToolBar.ancestorInputMap=
ToolBar.handleIcon=

##   disabled        the background color of the toolBars when disabled. A color in RGB or hexadecimal is required. By default: 214;217;223
ToolBar.disabled=

##   background        the background color of the toolBars. A color in RGB or hexadecimal is required. By default: 214;217;223
ToolBar.background=
ToolBar[North].backgroundPainter_bgPainter=
ToolBar[East].backgroundPainter_bgPainter=
ToolBar[South].backgroundPainter_bgPainter=
ToolBar[West].backgroundPainter_bgPainter=

ToolBar[North].borderPainter=
ToolBar[East].borderPainter=
ToolBar[South].borderPainter=
ToolBar[West].borderPainter=


############## TOOLBAR: BUTTON:
ToolBar\:Button.contentMargins=
ToolBar\:Button[Enabled].textForeground=

ToolBar\:Button[Focused].backgroundPainter_focusedBorder=
ToolBar\:Button[MouseOver].backgroundPainter_borderShadow=
ToolBar\:Button[MouseOver].backgroundPainter_border=
ToolBar\:Button[MouseOver].backgroundPainter_bgPainter=
ToolBar\:Button[Focused+MouseOver].backgroundPainter_focusedBorder=
ToolBar\:Button[Focused+MouseOver].backgroundPainter_border=
ToolBar\:Button[Focused+MouseOver].backgroundPainter_bgPainter=
ToolBar\:Button[Pressed].backgroundPainter_borderShadow=
ToolBar\:Button[Pressed].backgroundPainter_border=
ToolBar\:Button[Pressed].backgroundPainter_bgPainter=
ToolBar\:Button[Focused+Pressed].backgroundPainter_focusedBorder=
ToolBar\:Button[Focused+Pressed].backgroundPainter_border=
ToolBar\:Button[Focused+Pressed].backgroundPainter_bgPainter=
ToolBar\:Button[Enabled].backgroundPainter_borderShadow=
ToolBar\:Button[Enabled].backgroundPainter_border=
ToolBar\:Button[Enabled].backgroundPainter_bgPainter=


############## TOOLBAR: TOOGLE BUTTON:
ToolBar\:ToggleButton.contentMargins=
ToolBar\:ToggleButton[Enabled].textForeground=
ToolBar\:ToggleButton[Disabled+Selected].textForeground=
		
ToolBar\:ToggleButton[Focused].backgroundPainter_focusedBorder=
ToolBar\:ToggleButton[MouseOver].backgroundPainter_borderShadow=
ToolBar\:ToggleButton[MouseOver].backgroundPainter_border=
ToolBar\:ToggleButton[MouseOver].backgroundPainter_bgPainter=
ToolBar\:ToggleButton[Focused+MouseOver].backgroundPainter_focusedBorder=
ToolBar\:ToggleButton[Focused+MouseOver].backgroundPainter_border=
ToolBar\:ToggleButton[Focused+MouseOver].backgroundPainter_bgPainter=
ToolBar\:ToggleButton[Pressed].backgroundPainter_borderShadow=
ToolBar\:ToggleButton[Pressed].backgroundPainter_border=
ToolBar\:ToggleButton[Pressed].backgroundPainter_bgPainter=
ToolBar\:ToggleButton[Focused+Pressed].backgroundPainter_focusedBorder=
ToolBar\:ToggleButton[Focused+Pressed].backgroundPainter_border=
ToolBar\:ToggleButton[Focused+Pressed].backgroundPainter_bgPainter=
ToolBar\:ToggleButton[Selected].backgroundPainter_focusedBorder=
ToolBar\:ToggleButton[Selected].backgroundPainter_border=
ToolBar\:ToggleButton[Selected].backgroundPainter_bgPainter=
ToolBar\:ToggleButton[Focused+Selected].backgroundPainter_focusedBorder=
ToolBar\:ToggleButton[Focused+Selected].backgroundPainter_border=
ToolBar\:ToggleButton[Focused+Selected].backgroundPainter_bgPainter=
ToolBar\:ToggleButton[Selected+Pressed].backgroundPainter_focusedBorder=
ToolBar\:ToggleButton[Selected+Pressed].backgroundPainter_border=
ToolBar\:ToggleButton[Selected+Pressed].backgroundPainter_bgPainter=
ToolBar\:ToggleButton[Focused+Pressed+Selected].backgroundPainter_focusedBorder=
ToolBar\:ToggleButton[Focused+Pressed+Selected].backgroundPainter_border=
ToolBar\:ToggleButton[Focused+Pressed+Selected].backgroundPainter_bgPainter=
ToolBar\:ToggleButton[MouseOver+Selected].backgroundPainter_focusedBorder=
ToolBar\:ToggleButton[MouseOver+Selected].backgroundPainter_border=
ToolBar\:ToggleButton[MouseOver+Selected].backgroundPainter_bgPainter=
ToolBar\:ToggleButton[Focused+MouseOver+Selected].backgroundPainter_focusedBorder=
ToolBar\:ToggleButton[Focused+MouseOver+Selected].backgroundPainter_border=
ToolBar\:ToggleButton[Focused+MouseOver+Selected].backgroundPainter_bgPainter=
ToolBar\:ToggleButton[Disabled+Selected].backgroundPainter_focusedBorder=
ToolBar\:ToggleButton[Disabled+Selected].backgroundPainter_border=
ToolBar\:ToggleButton[Disabled+Selected].backgroundPainter_bgPainter=

ToolBar\:ToggleButton[Enabled].backgroundPainter_borderShadow=
ToolBar\:ToggleButton[Enabled].backgroundPainter_border=
ToolBar\:ToggleButton[Enabled].backgroundPainter_bgPainter=








#######################################################################################################################
#######################################################################################################################
###################################  SPECIFIC ONTIMIZE COMPONENTS    ##################################################
#######################################################################################################################
#######################################################################################################################

# Sometimes it is required to define some Ontimize classes or sub-classes as independient JAVA components, in order to  be able to specify a 
# different layout for those classes. (For instance, the FormTitle is a TextField but in some cases it is required put it a diffent layout. 
# Or rows and columns can be required to be configured not as the other Panels in the application.

# All those components (keys) are included here. (For information, see above the keys meaning, in the component related for each one)

# Rows, Columns, Grids, Form, FormExt ... = PANELS
# (opaque= true=> semitransparent background; opaque= false=> solid background; opaque= nothing => background only indicates the border colors when title not null)
\"Row\".font=
\"Row\".contentMargins=
\"Row\".opaque=
\"Row\".background=
\"Row\".foreground=
\"Row\".disabled=
\"Row\".disabledText=

\"Column\".font=
\"Column\".contentMargins=
\"Column\".opaque=
\"Column\".background=
\"Column\".foreground=
\"Column\".disabled=
\"Column\".disabledText=

\"Grid\".font=
\"Grid\".contentMargins=
\"Grid\".opaque=
\"Grid\".background=
\"Grid\".foreground=
\"Grid\".disabled=
\"Grid\".disabledText=

\"Form\".font=
\"Form\".contentMargins=
\"Form\".opaque=
\"Form\"[Enabled].backgroundPainter_bgPainter=
\"Form\".background=
\"Form\".foreground=
\"Form\".disabled=
\"Form\".disabledText=

\"FormExt\".font=
\"FormExt\".contentMargins=
\"FormExt\".opaque=
\"FormExt\"[Enabled].backgroundPainter_bgPainter=
\"FormExt\".background=
\"FormExt\".foreground=
\"FormExt\".disabled=
\"FormExt\".disabledText=


# FormTitle, ... = TextField
\"FormTitle\".font=
\"FormTitle\".contentMargins=
\"FormTitle\"[Enabled].textForeground=
\"FormTitle\"[Disabled].textForeground=
\"FormTitle\"[Focused].textForeground=
\"FormTitle\"[Selected].textForeground=
\"FormTitle\".arcWidth=
\"FormTitle\".arcHeight=
\"FormTitle\"[Enabled].backgroundPainter_bgPainter=
\"FormTitle\"[Disabled].backgroundPainter_bgPainter=
\"FormTitle\"[Selected].backgroundPainter_bgPainter=
\"FormTitle\".degradatedBorderColor.Enabled=
\"FormTitle\".degradatedBorderColor.Disabled=
\"FormTitle\".degradatedBorderColor.Focused=
\"FormTitle\"[Enabled].borderPainter_topLine=
\"FormTitle\"[Enabled].borderPainter_secondaryTopLine=
\"FormTitle\"[Enabled].borderPainter_leftLine=
\"FormTitle\"[Enabled].borderPainter_rightLine=
\"FormTitle\"[Enabled].borderPainter_bottomLine=
\"FormTitle\"[Disabled].borderPainter_topLine=
\"FormTitle\"[Disabled].borderPainter_secondaryTopLine=
\"FormTitle\"[Disabled].borderPainter_leftLine=
\"FormTitle\"[Disabled].borderPainter_rightLine=
\"FormTitle\"[Disabled].borderPainter_bottomLine=
\"FormTitle\"[Focused].borderPainter_topLine=
\"FormTitle\"[Focused].borderPainter_secondaryTopLine=
\"FormTitle\"[Focused].borderPainter_leftLine=
\"FormTitle\"[Focused].borderPainter_rightLine=
\"FormTitle\"[Focused].borderPainter_bottomLine=
\"FormTitle\"[Focused].borderPainter_focusBorder=

\"FormTitle\".background=
\"FormTitle\".foreground=
\"FormTitle\".disabled=
\"FormTitle\".disabledText=
